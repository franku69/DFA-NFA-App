{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\Automata APP\\\\frontend\\\\src\\\\components\\\\AutomatonVisualizer.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Stage, Layer, Circle, Arrow, Text } from 'react-konva';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AutomatonVisualizer = ({\n  automaton\n}) => {\n  _s();\n  const [statePositions, setStatePositions] = useState({});\n  const [stageDimensions, setStageDimensions] = useState({\n    width: window.innerWidth,\n    height: window.innerHeight\n  });\n  useEffect(() => {\n    const handleResize = () => {\n      setStageDimensions({\n        width: window.innerWidth,\n        height: window.innerHeight\n      });\n      calculateStatePositions();\n    };\n    window.addEventListener('resize', handleResize);\n    calculateStatePositions();\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, [automaton.states, automaton.startState]);\n  const calculateStatePositions = () => {\n    const positions = {};\n    const baseRadius = stageDimensions.width < 600 ? 100 : 200; // Smaller radius for small screens\n    const radius = baseRadius + automaton.states.length * 30;\n    const centerX = stageDimensions.width / 2;\n    const centerY = stageDimensions.height / 2;\n    const angleStep = 2 * Math.PI / (automaton.states.length - 1);\n    const verticalOffset = stageDimensions.width < 600 ? 50 : 100;\n    let maxY = centerY;\n    automaton.states.forEach((state, index) => {\n      if (state === automaton.startState) {\n        positions[state] = {\n          x: centerX - radius - 50,\n          y: centerY\n        };\n      } else {\n        const angle = (index - 1) * angleStep;\n        positions[state] = {\n          x: centerX + radius * Math.cos(angle),\n          y: centerY + radius * Math.sin(angle) + index * verticalOffset\n        };\n      }\n      maxY = Math.max(maxY, positions[state].y + 100);\n    });\n    setStatePositions(positions);\n    setStageDimensions(prev => ({\n      ...prev,\n      height: Math.max(maxY + 100, window.innerHeight)\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(Stage, {\n    width: stageDimensions.width,\n    height: stageDimensions.height,\n    children: /*#__PURE__*/_jsxDEV(Layer, {\n      children: [automaton.states.map(state => {\n        const {\n          x,\n          y\n        } = statePositions[state] || {};\n        const isAcceptState = automaton.acceptStates.includes(state);\n        return /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Circle, {\n            x: x,\n            y: y,\n            radius: 20,\n            fill: \"blue\",\n            stroke: isAcceptState ? 'green' : 'black',\n            strokeWidth: isAcceptState ? 4 : 2\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            x: x - 10,\n            y: y - 5,\n            text: state,\n            fill: \"white\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 15\n          }, this), state === automaton.startState && /*#__PURE__*/_jsxDEV(Arrow, {\n            points: [x - 70, y, x - 30, y],\n            fill: \"red\",\n            stroke: \"red\",\n            pointerLength: 10,\n            pointerWidth: 10\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 17\n          }, this)]\n        }, state, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this);\n      }), automaton.transitions.map((transition, index) => {\n        const {\n          from,\n          to,\n          input\n        } = transition;\n        const fromPos = statePositions[from];\n        const toPos = statePositions[to];\n        const arrowOffset = 25;\n        const textOffset = 30;\n        if (!fromPos || !toPos) return null;\n        const isSelfLoop = from === to;\n        if (isSelfLoop) {\n          const loopRadius = 30;\n          const loopOffset = 20;\n          const selfLoopInputs = getSelfLoopTransitions(from).join(\", \");\n          return /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Arrow, {\n              points: [fromPos.x + loopRadius, fromPos.y - loopRadius, fromPos.x + loopRadius * 2, fromPos.y - loopRadius * 1.5, fromPos.x + loopRadius, fromPos.y - loopRadius * 2, fromPos.x, fromPos.y - loopRadius],\n              tension: 0.5,\n              stroke: \"black\",\n              fill: \"black\",\n              pointerLength: 6,\n              pointerWidth: 6\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Text, {\n              x: fromPos.x + loopRadius * 1.8,\n              y: fromPos.y - loopRadius * 1.8 - loopOffset,\n              text: selfLoopInputs,\n              fontSize: 14,\n              fill: \"black\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 17\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 15\n          }, this);\n        } else {\n          const startOffsetPos = offsetPoint(fromPos, toPos, arrowOffset);\n          const adjustedToPos = adjustedOffsetPoint(fromPos, toPos, arrowOffset);\n          const curveOffset = 35;\n          const middlePoint = {\n            x: (startOffsetPos.x + adjustedToPos.x) / 2 - curveOffset * Math.sign(fromPos.y - toPos.y),\n            y: (startOffsetPos.y + adjustedToPos.y) / 2 - curveOffset * Math.sign(toPos.x - fromPos.x)\n          };\n          return /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Arrow, {\n              points: [startOffsetPos.x, startOffsetPos.y, middlePoint.x, middlePoint.y, adjustedToPos.x, adjustedToPos.y],\n              tension: 0.5,\n              stroke: \"black\",\n              fill: \"black\",\n              pointerLength: 10,\n              pointerWidth: 10\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Text, {\n              x: middlePoint.x,\n              y: middlePoint.y - textOffset,\n              text: input,\n              fontSize: 14,\n              fill: \"black\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 17\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 15\n          }, this);\n        }\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n_s(AutomatonVisualizer, \"F7+zGOcRSFXy/f3TFFIUfkqVnmg=\");\n_c = AutomatonVisualizer;\nexport default AutomatonVisualizer;\nvar _c;\n$RefreshReg$(_c, \"AutomatonVisualizer\");","map":{"version":3,"names":["React","useEffect","useState","Stage","Layer","Circle","Arrow","Text","jsxDEV","_jsxDEV","AutomatonVisualizer","automaton","_s","statePositions","setStatePositions","stageDimensions","setStageDimensions","width","window","innerWidth","height","innerHeight","handleResize","calculateStatePositions","addEventListener","removeEventListener","states","startState","positions","baseRadius","radius","length","centerX","centerY","angleStep","Math","PI","verticalOffset","maxY","forEach","state","index","x","y","angle","cos","sin","max","prev","children","map","isAcceptState","acceptStates","includes","Fragment","fill","stroke","strokeWidth","fileName","_jsxFileName","lineNumber","columnNumber","text","points","pointerLength","pointerWidth","transitions","transition","from","to","input","fromPos","toPos","arrowOffset","textOffset","isSelfLoop","loopRadius","loopOffset","selfLoopInputs","getSelfLoopTransitions","join","tension","fontSize","startOffsetPos","offsetPoint","adjustedToPos","adjustedOffsetPoint","curveOffset","middlePoint","sign","_c","$RefreshReg$"],"sources":["C:/Users/hp/Desktop/Automata APP/frontend/src/components/AutomatonVisualizer.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Stage, Layer, Circle, Arrow, Text } from 'react-konva';\r\n\r\nconst AutomatonVisualizer = ({ automaton }) => {\r\n  const [statePositions, setStatePositions] = useState({});\r\n  const [stageDimensions, setStageDimensions] = useState({\r\n    width: window.innerWidth,\r\n    height: window.innerHeight,\r\n  });\r\n\r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      setStageDimensions({\r\n        width: window.innerWidth,\r\n        height: window.innerHeight,\r\n      });\r\n      calculateStatePositions();\r\n    };\r\n\r\n    window.addEventListener('resize', handleResize);\r\n    calculateStatePositions();\r\n\r\n    return () => {\r\n      window.removeEventListener('resize', handleResize);\r\n    };\r\n  }, [automaton.states, automaton.startState]);\r\n\r\n  const calculateStatePositions = () => {\r\n    const positions = {};\r\n    const baseRadius = stageDimensions.width < 600 ? 100 : 200; // Smaller radius for small screens\r\n    const radius = baseRadius + automaton.states.length * 30;\r\n    const centerX = stageDimensions.width / 2;\r\n    const centerY = stageDimensions.height / 2;\r\n    const angleStep = (2 * Math.PI) / (automaton.states.length - 1);\r\n    const verticalOffset = stageDimensions.width < 600 ? 50 : 100;\r\n\r\n    let maxY = centerY;\r\n\r\n    automaton.states.forEach((state, index) => {\r\n      if (state === automaton.startState) {\r\n        positions[state] = {\r\n          x: centerX - radius - 50,\r\n          y: centerY,\r\n        };\r\n      } else {\r\n        const angle = (index - 1) * angleStep;\r\n        positions[state] = {\r\n          x: centerX + radius * Math.cos(angle),\r\n          y: centerY + radius * Math.sin(angle) + index * verticalOffset,\r\n        };\r\n      }\r\n\r\n      maxY = Math.max(maxY, positions[state].y + 100);\r\n    });\r\n\r\n    setStatePositions(positions);\r\n    setStageDimensions((prev) => ({\r\n      ...prev,\r\n      height: Math.max(maxY + 100, window.innerHeight),\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <Stage width={stageDimensions.width} height={stageDimensions.height}>\r\n      <Layer>\r\n        {automaton.states.map((state) => {\r\n          const { x, y } = statePositions[state] || {};\r\n          const isAcceptState = automaton.acceptStates.includes(state);\r\n\r\n          return (\r\n            <React.Fragment key={state}>\r\n              <Circle\r\n                x={x}\r\n                y={y}\r\n                radius={20}\r\n                fill=\"blue\"\r\n                stroke={isAcceptState ? 'green' : 'black'}\r\n                strokeWidth={isAcceptState ? 4 : 2}\r\n              />\r\n              <Text x={x - 10} y={y - 5} text={state} fill=\"white\" />\r\n              {state === automaton.startState && (\r\n                <Arrow\r\n                  points={[x - 70, y, x - 30, y]}\r\n                  fill=\"red\"\r\n                  stroke=\"red\"\r\n                  pointerLength={10}\r\n                  pointerWidth={10}\r\n                />\r\n              )}\r\n            </React.Fragment>\r\n          );\r\n        })}\r\n\r\n        {automaton.transitions.map((transition, index) => {\r\n          const { from, to, input } = transition;\r\n          const fromPos = statePositions[from];\r\n          const toPos = statePositions[to];\r\n          const arrowOffset = 25;\r\n          const textOffset = 30;\r\n\r\n          if (!fromPos || !toPos) return null;\r\n\r\n          const isSelfLoop = from === to;\r\n\r\n          if (isSelfLoop) {\r\n            const loopRadius = 30;\r\n            const loopOffset = 20;\r\n            const selfLoopInputs = getSelfLoopTransitions(from).join(\", \");\r\n\r\n            return (\r\n              <React.Fragment key={index}>\r\n                <Arrow\r\n                  points={[\r\n                    fromPos.x + loopRadius, fromPos.y - loopRadius,\r\n                    fromPos.x + loopRadius * 2, fromPos.y - loopRadius * 1.5,\r\n                    fromPos.x + loopRadius, fromPos.y - loopRadius * 2,\r\n                    fromPos.x, fromPos.y - loopRadius\r\n                  ]}\r\n                  tension={0.5}\r\n                  stroke=\"black\"\r\n                  fill=\"black\"\r\n                  pointerLength={6}\r\n                  pointerWidth={6}\r\n                />\r\n                <Text\r\n                  x={fromPos.x + loopRadius * 1.8}\r\n                  y={fromPos.y - loopRadius * 1.8 - loopOffset}\r\n                  text={selfLoopInputs}\r\n                  fontSize={14}\r\n                  fill=\"black\"\r\n                />\r\n              </React.Fragment>\r\n            );\r\n          } else {\r\n            const startOffsetPos = offsetPoint(fromPos, toPos, arrowOffset);\r\n            const adjustedToPos = adjustedOffsetPoint(fromPos, toPos, arrowOffset);\r\n            const curveOffset = 35;\r\n            const middlePoint = {\r\n              x: (startOffsetPos.x + adjustedToPos.x) / 2 - curveOffset * Math.sign(fromPos.y - toPos.y),\r\n              y: (startOffsetPos.y + adjustedToPos.y) / 2 - curveOffset * Math.sign(toPos.x - fromPos.x),\r\n            };\r\n\r\n            return (\r\n              <React.Fragment key={index}>\r\n                <Arrow\r\n                  points={[\r\n                    startOffsetPos.x, startOffsetPos.y,\r\n                    middlePoint.x, middlePoint.y,\r\n                    adjustedToPos.x, adjustedToPos.y\r\n                  ]}\r\n                  tension={0.5}\r\n                  stroke=\"black\"\r\n                  fill=\"black\"\r\n                  pointerLength={10}\r\n                  pointerWidth={10}\r\n                />\r\n                <Text\r\n                  x={middlePoint.x}\r\n                  y={middlePoint.y - textOffset}\r\n                  text={input}\r\n                  fontSize={14}\r\n                  fill=\"black\"\r\n                />\r\n              </React.Fragment>\r\n            );\r\n          }\r\n        })}\r\n      </Layer>\r\n    </Stage>\r\n  );\r\n};\r\n\r\nexport default AutomatonVisualizer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}