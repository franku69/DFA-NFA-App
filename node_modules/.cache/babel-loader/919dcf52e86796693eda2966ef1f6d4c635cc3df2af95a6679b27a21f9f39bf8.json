{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\Automata APP\\\\frontend\\\\src\\\\components\\\\SimulationResult.js\",\n  _s = $RefreshSig$();\n// SimulationResult.js\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SimulationResult = ({\n  automaton\n}) => {\n  _s();\n  const [results, setResults] = useState([]);\n  useEffect(() => {\n    const runSimulation = () => {\n      const results = automaton.inputStrings.map(inputString => {\n        let currentStates = [automaton.startState];\n        let isAccepted = false;\n        for (let input of inputString) {\n          let nextStates = [];\n          currentStates.forEach(state => {\n            const possibleTransitions = automaton.transitions.filter(t => t.from === state && t.input === input);\n            if (possibleTransitions.length > 0) {\n              possibleTransitions.forEach(transition => {\n                nextStates.push(transition.to);\n              });\n            }\n          });\n\n          // For DFA, ensure only one next state\n          currentStates = automaton.type === 'DFA' ? nextStates.slice(0, 1) : nextStates;\n          if (currentStates.length === 0) {\n            return {\n              inputString,\n              result: 'Rejected'\n            };\n          }\n        }\n\n        // Check if any of the final states is an accept state\n        isAccepted = currentStates.some(state => automaton.acceptStates.includes(state));\n        return {\n          inputString,\n          result: isAccepted ? 'Accepted' : 'Rejected'\n        };\n      });\n      setResults(results);\n    };\n    runSimulation();\n  }, [automaton]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Simulation Results\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), results.map(({\n      inputString,\n      result\n    }, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Input: \", inputString, \" - Result: \", result]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(SimulationResult, \"0Oir8sO9qj6087fqVYj2OrfQH1E=\");\n_c = SimulationResult;\nexport default SimulationResult;\nvar _c;\n$RefreshReg$(_c, \"SimulationResult\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","SimulationResult","automaton","_s","results","setResults","runSimulation","inputStrings","map","inputString","currentStates","startState","isAccepted","input","nextStates","forEach","state","possibleTransitions","transitions","filter","t","from","length","transition","push","to","type","slice","result","some","acceptStates","includes","children","fileName","_jsxFileName","lineNumber","columnNumber","index","_c","$RefreshReg$"],"sources":["C:/Users/hp/Desktop/Automata APP/frontend/src/components/SimulationResult.js"],"sourcesContent":["// SimulationResult.js\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nconst SimulationResult = ({ automaton }) => {\r\n  const [results, setResults] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const runSimulation = () => {\r\n      const results = automaton.inputStrings.map((inputString) => {\r\n        let currentStates = [automaton.startState];\r\n        let isAccepted = false;\r\n\r\n        for (let input of inputString) {\r\n          let nextStates = [];\r\n\r\n          currentStates.forEach((state) => {\r\n            const possibleTransitions = automaton.transitions.filter(\r\n              (t) => t.from === state && t.input === input\r\n            );\r\n\r\n            if (possibleTransitions.length > 0) {\r\n              possibleTransitions.forEach((transition) => {\r\n                nextStates.push(transition.to);\r\n              });\r\n            }\r\n          });\r\n\r\n          // For DFA, ensure only one next state\r\n          currentStates = automaton.type === 'DFA' ? nextStates.slice(0, 1) : nextStates;\r\n\r\n          if (currentStates.length === 0) {\r\n            return { inputString, result: 'Rejected' };\r\n          }\r\n        }\r\n\r\n        // Check if any of the final states is an accept state\r\n        isAccepted = currentStates.some((state) => automaton.acceptStates.includes(state));\r\n\r\n        return { inputString, result: isAccepted ? 'Accepted' : 'Rejected' };\r\n      });\r\n\r\n      setResults(results);\r\n    };\r\n\r\n    runSimulation();\r\n  }, [automaton]);\r\n\r\n  return (\r\n    <div>\r\n      <h2>Simulation Results</h2>\r\n      {results.map(({ inputString, result }, index) => (\r\n        <div key={index}>\r\n          <p>Input: {inputString} - Result: {result}</p>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SimulationResult;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,gBAAgB,GAAGA,CAAC;EAAEC;AAAU,CAAC,KAAK;EAAAC,EAAA;EAC1C,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAE1CC,SAAS,CAAC,MAAM;IACd,MAAMQ,aAAa,GAAGA,CAAA,KAAM;MAC1B,MAAMF,OAAO,GAAGF,SAAS,CAACK,YAAY,CAACC,GAAG,CAAEC,WAAW,IAAK;QAC1D,IAAIC,aAAa,GAAG,CAACR,SAAS,CAACS,UAAU,CAAC;QAC1C,IAAIC,UAAU,GAAG,KAAK;QAEtB,KAAK,IAAIC,KAAK,IAAIJ,WAAW,EAAE;UAC7B,IAAIK,UAAU,GAAG,EAAE;UAEnBJ,aAAa,CAACK,OAAO,CAAEC,KAAK,IAAK;YAC/B,MAAMC,mBAAmB,GAAGf,SAAS,CAACgB,WAAW,CAACC,MAAM,CACrDC,CAAC,IAAKA,CAAC,CAACC,IAAI,KAAKL,KAAK,IAAII,CAAC,CAACP,KAAK,KAAKA,KACzC,CAAC;YAED,IAAII,mBAAmB,CAACK,MAAM,GAAG,CAAC,EAAE;cAClCL,mBAAmB,CAACF,OAAO,CAAEQ,UAAU,IAAK;gBAC1CT,UAAU,CAACU,IAAI,CAACD,UAAU,CAACE,EAAE,CAAC;cAChC,CAAC,CAAC;YACJ;UACF,CAAC,CAAC;;UAEF;UACAf,aAAa,GAAGR,SAAS,CAACwB,IAAI,KAAK,KAAK,GAAGZ,UAAU,CAACa,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,GAAGb,UAAU;UAE9E,IAAIJ,aAAa,CAACY,MAAM,KAAK,CAAC,EAAE;YAC9B,OAAO;cAAEb,WAAW;cAAEmB,MAAM,EAAE;YAAW,CAAC;UAC5C;QACF;;QAEA;QACAhB,UAAU,GAAGF,aAAa,CAACmB,IAAI,CAAEb,KAAK,IAAKd,SAAS,CAAC4B,YAAY,CAACC,QAAQ,CAACf,KAAK,CAAC,CAAC;QAElF,OAAO;UAAEP,WAAW;UAAEmB,MAAM,EAAEhB,UAAU,GAAG,UAAU,GAAG;QAAW,CAAC;MACtE,CAAC,CAAC;MAEFP,UAAU,CAACD,OAAO,CAAC;IACrB,CAAC;IAEDE,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,CAACJ,SAAS,CAAC,CAAC;EAEf,oBACEF,OAAA;IAAAgC,QAAA,gBACEhC,OAAA;MAAAgC,QAAA,EAAI;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAC1BhC,OAAO,CAACI,GAAG,CAAC,CAAC;MAAEC,WAAW;MAAEmB;IAAO,CAAC,EAAES,KAAK,kBAC1CrC,OAAA;MAAAgC,QAAA,eACEhC,OAAA;QAAAgC,QAAA,GAAG,SAAO,EAACvB,WAAW,EAAC,aAAW,EAACmB,MAAM;MAAA;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC,GADtCC,KAAK;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEV,CACN,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACjC,EAAA,CAtDIF,gBAAgB;AAAAqC,EAAA,GAAhBrC,gBAAgB;AAwDtB,eAAeA,gBAAgB;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}