{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\Automata APP\\\\frontend\\\\src\\\\components\\\\AutomatonInput.js\",\n  _s = $RefreshSig$();\n// AutomatonInput.js\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AutomatonInput = ({\n  onSubmit\n}) => {\n  _s();\n  const [type, setType] = useState('DFA'); // Default to DFA\n  const [states, setStates] = useState('');\n  const [alphabet, setAlphabet] = useState('');\n  const [transitions, setTransitions] = useState('');\n  const [startState, setStartState] = useState('');\n  const [acceptStates, setAcceptStates] = useState('');\n  const [testString, setTestString] = useState(''); // For testing individual strings\n  const [result, setResult] = useState(null); // Display result of the test string\n\n  const validateAutomaton = automaton => {\n    const {\n      type,\n      states,\n      alphabet,\n      transitions,\n      startState,\n      acceptStates\n    } = automaton;\n    if (!states.includes(startState)) {\n      alert(`Start state \"${startState}\" must be one of the defined states.`);\n      return false;\n    }\n    for (const acceptState of acceptStates) {\n      if (!states.includes(acceptState)) {\n        alert(`Accept state \"${acceptState}\" must be one of the defined states.`);\n        return false;\n      }\n    }\n    for (const transition of transitions) {\n      const {\n        from,\n        input,\n        to\n      } = transition;\n      if (!states.includes(from) || !alphabet.includes(input) || !states.includes(to)) {\n        alert(`Transition \"${from},${input},${to}\" is invalid. Ensure all states and inputs exist.`);\n        return false;\n      }\n      if (type === 'DFA') {\n        const fromTransitions = transitions.filter(t => t.from === from && t.input === input);\n        if (fromTransitions.length > 1) {\n          alert(`DFA cannot have multiple transitions for \"${from}\" on input \"${input}\".`);\n          return false;\n        }\n      }\n    }\n    return true;\n  };\n  const simulateAutomaton = (string, automaton) => {\n    const {\n      type,\n      states,\n      alphabet,\n      transitions,\n      startState,\n      acceptStates\n    } = automaton;\n    if (type === 'DFA') {\n      let currentState = startState;\n      for (const char of string) {\n        const transition = transitions.find(t => t.from === currentState && t.input === char);\n        if (!transition) return false; // Reject if no valid transition\n        currentState = transition.to;\n      }\n      return acceptStates.includes(currentState);\n    } else if (type === 'NFA') {\n      // NFA simulation with recursion to allow multiple paths\n      const explore = (currentStates, index) => {\n        if (index === string.length) return currentStates.some(state => acceptStates.includes(state));\n        const nextChar = string[index];\n        let nextStates = [];\n        for (const state of currentStates) {\n          nextStates = nextStates.concat(transitions.filter(t => t.from === state && t.input === nextChar).map(t => t.to));\n        }\n        return explore([...new Set(nextStates)], index + 1);\n      };\n      return explore([startState], 0);\n    }\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    const parsedStates = states.split(',').map(s => s.trim());\n    const parsedAlphabet = alphabet.split(',').map(s => s.trim());\n    const parsedTransitions = transitions.split(';').map(t => {\n      const [from, input, to] = t.split(',').map(s => s.trim());\n      return {\n        from,\n        input,\n        to\n      };\n    });\n    const parsedAcceptStates = acceptStates.split(',').map(s => s.trim());\n    const automaton = {\n      type,\n      states: parsedStates,\n      alphabet: parsedAlphabet,\n      transitions: parsedTransitions,\n      startState: startState.trim(),\n      acceptStates: parsedAcceptStates\n    };\n    if (validateAutomaton(automaton)) {\n      onSubmit(automaton);\n    }\n  };\n  const handleTestString = () => {\n    const parsedStates = states.split(',').map(s => s.trim());\n    const parsedAlphabet = alphabet.split(',').map(s => s.trim());\n    const parsedTransitions = transitions.split(';').map(t => {\n      const [from, input, to] = t.split(',').map(s => s.trim());\n      return {\n        from,\n        input,\n        to\n      };\n    });\n    const parsedAcceptStates = acceptStates.split(',').map(s => s.trim());\n    const automaton = {\n      type,\n      states: parsedStates,\n      alphabet: parsedAlphabet,\n      transitions: parsedTransitions,\n      startState: startState.trim(),\n      acceptStates: parsedAcceptStates\n    };\n    const isAccepted = simulateAutomaton(testString, automaton);\n    setResult(isAccepted ? 'Accepted' : 'Rejected');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Automaton Input\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Type (DFA/NFA):\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: type,\n          onChange: e => setType(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"DFA\",\n            children: \"DFA\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"NFA\",\n            children: \"NFA\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"States (comma separated):\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: states,\n          onChange: e => setStates(e.target.value),\n          placeholder: \"e.g., q0, q1, q2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Alphabet (comma separated):\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: alphabet,\n          onChange: e => setAlphabet(e.target.value),\n          placeholder: \"e.g., a, b, c\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Transitions (format: from,input,to;):\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: transitions,\n          onChange: e => setTransitions(e.target.value),\n          placeholder: \"e.g., q0,a,q1; q1,b,q2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Start State:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: startState,\n          onChange: e => setStartState(e.target.value),\n          placeholder: \"e.g., q0\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Accept States (comma separated):\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: acceptStates,\n          onChange: e => setAcceptStates(e.target.value),\n          placeholder: \"e.g., q2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit Automaton\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Test Input String\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: testString,\n        onChange: e => setTestString(e.target.value),\n        placeholder: \"Enter string to test\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleTestString,\n        children: \"Test String\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this), result && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Result: \", result]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 20\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n};\n_s(AutomatonInput, \"pEpiaEZIBnv/oqVX57aiiklEkog=\");\n_c = AutomatonInput;\nexport default AutomatonInput;\nvar _c;\n$RefreshReg$(_c, \"AutomatonInput\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","AutomatonInput","onSubmit","_s","type","setType","states","setStates","alphabet","setAlphabet","transitions","setTransitions","startState","setStartState","acceptStates","setAcceptStates","testString","setTestString","result","setResult","validateAutomaton","automaton","includes","alert","acceptState","transition","from","input","to","fromTransitions","filter","t","length","simulateAutomaton","string","currentState","char","find","explore","currentStates","index","some","state","nextChar","nextStates","concat","map","Set","handleSubmit","e","preventDefault","parsedStates","split","s","trim","parsedAlphabet","parsedTransitions","parsedAcceptStates","handleTestString","isAccepted","style","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/hp/Desktop/Automata APP/frontend/src/components/AutomatonInput.js"],"sourcesContent":["// AutomatonInput.js\r\nimport React, { useState } from 'react';\r\n\r\nconst AutomatonInput = ({ onSubmit }) => {\r\n  const [type, setType] = useState('DFA'); // Default to DFA\r\n  const [states, setStates] = useState('');\r\n  const [alphabet, setAlphabet] = useState('');\r\n  const [transitions, setTransitions] = useState('');\r\n  const [startState, setStartState] = useState('');\r\n  const [acceptStates, setAcceptStates] = useState('');\r\n  const [testString, setTestString] = useState(''); // For testing individual strings\r\n  const [result, setResult] = useState(null); // Display result of the test string\r\n\r\n  const validateAutomaton = (automaton) => {\r\n    const { type, states, alphabet, transitions, startState, acceptStates } = automaton;\r\n\r\n    if (!states.includes(startState)) {\r\n      alert(`Start state \"${startState}\" must be one of the defined states.`);\r\n      return false;\r\n    }\r\n\r\n    for (const acceptState of acceptStates) {\r\n      if (!states.includes(acceptState)) {\r\n        alert(`Accept state \"${acceptState}\" must be one of the defined states.`);\r\n        return false;\r\n      }\r\n    }\r\n\r\n    for (const transition of transitions) {\r\n      const { from, input, to } = transition;\r\n      if (!states.includes(from) || !alphabet.includes(input) || !states.includes(to)) {\r\n        alert(`Transition \"${from},${input},${to}\" is invalid. Ensure all states and inputs exist.`);\r\n        return false;\r\n      }\r\n\r\n      if (type === 'DFA') {\r\n        const fromTransitions = transitions.filter(t => t.from === from && t.input === input);\r\n        if (fromTransitions.length > 1) {\r\n          alert(`DFA cannot have multiple transitions for \"${from}\" on input \"${input}\".`);\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const simulateAutomaton = (string, automaton) => {\r\n    const { type, states, alphabet, transitions, startState, acceptStates } = automaton;\r\n    \r\n    if (type === 'DFA') {\r\n      let currentState = startState;\r\n      for (const char of string) {\r\n        const transition = transitions.find(t => t.from === currentState && t.input === char);\r\n        if (!transition) return false; // Reject if no valid transition\r\n        currentState = transition.to;\r\n      }\r\n      return acceptStates.includes(currentState);\r\n    } else if (type === 'NFA') {\r\n      // NFA simulation with recursion to allow multiple paths\r\n      const explore = (currentStates, index) => {\r\n        if (index === string.length) return currentStates.some(state => acceptStates.includes(state));\r\n        const nextChar = string[index];\r\n        let nextStates = [];\r\n        for (const state of currentStates) {\r\n          nextStates = nextStates.concat(\r\n            transitions.filter(t => t.from === state && t.input === nextChar).map(t => t.to)\r\n          );\r\n        }\r\n        return explore([...new Set(nextStates)], index + 1);\r\n      };\r\n      return explore([startState], 0);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    const parsedStates = states.split(',').map((s) => s.trim());\r\n    const parsedAlphabet = alphabet.split(',').map((s) => s.trim());\r\n    const parsedTransitions = transitions\r\n      .split(';')\r\n      .map((t) => {\r\n        const [from, input, to] = t.split(',').map((s) => s.trim());\r\n        return { from, input, to };\r\n      });\r\n    const parsedAcceptStates = acceptStates.split(',').map((s) => s.trim());\r\n\r\n    const automaton = {\r\n      type,\r\n      states: parsedStates,\r\n      alphabet: parsedAlphabet,\r\n      transitions: parsedTransitions,\r\n      startState: startState.trim(),\r\n      acceptStates: parsedAcceptStates,\r\n    };\r\n\r\n    if (validateAutomaton(automaton)) {\r\n      onSubmit(automaton);\r\n    }\r\n  };\r\n\r\n  const handleTestString = () => {\r\n    const parsedStates = states.split(',').map((s) => s.trim());\r\n    const parsedAlphabet = alphabet.split(',').map((s) => s.trim());\r\n    const parsedTransitions = transitions\r\n      .split(';')\r\n      .map((t) => {\r\n        const [from, input, to] = t.split(',').map((s) => s.trim());\r\n        return { from, input, to };\r\n      });\r\n    const parsedAcceptStates = acceptStates.split(',').map((s) => s.trim());\r\n\r\n    const automaton = {\r\n      type,\r\n      states: parsedStates,\r\n      alphabet: parsedAlphabet,\r\n      transitions: parsedTransitions,\r\n      startState: startState.trim(),\r\n      acceptStates: parsedAcceptStates,\r\n    };\r\n\r\n    const isAccepted = simulateAutomaton(testString, automaton);\r\n    setResult(isAccepted ? 'Accepted' : 'Rejected');\r\n  };\r\n\r\n  return (\r\n    <div style={{ padding: '20px' }}>\r\n      <h2>Automaton Input</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <div>\r\n          <label>Type (DFA/NFA):</label>\r\n          <select value={type} onChange={(e) => setType(e.target.value)}>\r\n            <option value=\"DFA\">DFA</option>\r\n            <option value=\"NFA\">NFA</option>\r\n          </select>\r\n        </div>\r\n        <div>\r\n          <label>States (comma separated):</label>\r\n          <input\r\n            type=\"text\"\r\n            value={states}\r\n            onChange={(e) => setStates(e.target.value)}\r\n            placeholder=\"e.g., q0, q1, q2\"\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Alphabet (comma separated):</label>\r\n          <input\r\n            type=\"text\"\r\n            value={alphabet}\r\n            onChange={(e) => setAlphabet(e.target.value)}\r\n            placeholder=\"e.g., a, b, c\"\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Transitions (format: from,input,to;):</label>\r\n          <input\r\n            type=\"text\"\r\n            value={transitions}\r\n            onChange={(e) => setTransitions(e.target.value)}\r\n            placeholder=\"e.g., q0,a,q1; q1,b,q2\"\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Start State:</label>\r\n          <input\r\n            type=\"text\"\r\n            value={startState}\r\n            onChange={(e) => setStartState(e.target.value)}\r\n            placeholder=\"e.g., q0\"\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Accept States (comma separated):</label>\r\n          <input\r\n            type=\"text\"\r\n            value={acceptStates}\r\n            onChange={(e) => setAcceptStates(e.target.value)}\r\n            placeholder=\"e.g., q2\"\r\n          />\r\n        </div>\r\n        <button type=\"submit\">Submit Automaton</button>\r\n      </form>\r\n      <hr />\r\n      <div>\r\n        <h3>Test Input String</h3>\r\n        <input\r\n          type=\"text\"\r\n          value={testString}\r\n          onChange={(e) => setTestString(e.target.value)}\r\n          placeholder=\"Enter string to test\"\r\n        />\r\n        <button onClick={handleTestString}>Test String</button>\r\n        {result && <p>Result: {result}</p>}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AutomatonInput;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}