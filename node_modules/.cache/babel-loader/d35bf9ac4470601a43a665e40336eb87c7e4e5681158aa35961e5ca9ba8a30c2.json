{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\Automata APP\\\\frontend\\\\src\\\\components\\\\AutomatonVisualizer.js\",\n  _s = $RefreshSig$();\n// AutomatonVisualizer.js\nimport React, { useEffect, useState } from 'react';\nimport { Stage, Layer, Circle, Arrow, Text } from 'react-konva';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AutomatonVisualizer = ({\n  automaton\n}) => {\n  _s();\n  const [statePositions, setStatePositions] = useState({});\n  useEffect(() => {\n    // Auto-position states in a circular layout\n    const radius = 200;\n    const centerX = window.innerWidth / 2;\n    const centerY = window.innerHeight / 2;\n    const angleStep = 2 * Math.PI / automaton.states.length;\n    const positions = {};\n    automaton.states.forEach((state, index) => {\n      positions[state] = {\n        x: centerX + radius * Math.cos(index * angleStep),\n        y: centerY + radius * Math.sin(index * angleStep)\n      };\n    });\n    setStatePositions(positions);\n  }, [automaton.states]);\n  return /*#__PURE__*/_jsxDEV(Stage, {\n    width: window.innerWidth,\n    height: window.innerHeight,\n    children: /*#__PURE__*/_jsxDEV(Layer, {\n      children: [automaton.states.map(state => {\n        const {\n          x,\n          y\n        } = statePositions[state] || {};\n        const isAcceptState = automaton.acceptStates.includes(state);\n        return /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Circle, {\n            x: x,\n            y: y,\n            radius: 20,\n            fill: \"blue\",\n            stroke: isAcceptState ? 'green' : 'black',\n            strokeWidth: isAcceptState ? 4 : 2\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            x: x - 10,\n            y: y - 5,\n            text: state,\n            fill: \"white\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 15\n          }, this), state === automaton.startState && /*#__PURE__*/_jsxDEV(Arrow, {\n            points: [x - 50, y, x - 20, y],\n            fill: \"red\",\n            stroke: \"red\",\n            pointerLength: 10,\n            pointerWidth: 10\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 17\n          }, this)]\n        }, state, true, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 13\n        }, this);\n      }), automaton.transitions.map((transition, index) => {\n        const {\n          from,\n          to,\n          input\n        } = transition;\n        const fromPos = statePositions[from];\n        const toPos = statePositions[to];\n        if (!fromPos || !toPos) return null;\n\n        // For self-loop transitions\n        const isSelfLoop = from === to;\n        const loopOffset = 30;\n        return /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: [isSelfLoop ? /*#__PURE__*/_jsxDEV(Arrow, {\n            points: [fromPos.x + loopOffset, fromPos.y - loopOffset, fromPos.x + loopOffset * 2, fromPos.y - loopOffset * 2, fromPos.x, fromPos.y - loopOffset * 2, fromPos.x, fromPos.y - loopOffset],\n            stroke: \"black\",\n            fill: \"black\",\n            pointerLength: 6,\n            pointerWidth: 6\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 17\n          }, this) :\n          /*#__PURE__*/\n          // Draw transition arrow between different states\n          _jsxDEV(Arrow, {\n            points: [fromPos.x, fromPos.y, toPos.x, toPos.y],\n            stroke: \"black\",\n            fill: \"black\",\n            pointerLength: 10,\n            pointerWidth: 10\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            x: isSelfLoop ? fromPos.x + loopOffset : (fromPos.x + toPos.x) / 2,\n            y: isSelfLoop ? fromPos.y - loopOffset * 2 : (fromPos.y + toPos.y) / 2,\n            text: input,\n            fontSize: 14,\n            fill: \"black\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_s(AutomatonVisualizer, \"LrAznVwXtPCQOoFFfKMLuQSOdww=\");\n_c = AutomatonVisualizer;\nexport default AutomatonVisualizer;\nvar _c;\n$RefreshReg$(_c, \"AutomatonVisualizer\");","map":{"version":3,"names":["React","useEffect","useState","Stage","Layer","Circle","Arrow","Text","jsxDEV","_jsxDEV","AutomatonVisualizer","automaton","_s","statePositions","setStatePositions","radius","centerX","window","innerWidth","centerY","innerHeight","angleStep","Math","PI","states","length","positions","forEach","state","index","x","cos","y","sin","width","height","children","map","isAcceptState","acceptStates","includes","Fragment","fill","stroke","strokeWidth","fileName","_jsxFileName","lineNumber","columnNumber","text","startState","points","pointerLength","pointerWidth","transitions","transition","from","to","input","fromPos","toPos","isSelfLoop","loopOffset","fontSize","_c","$RefreshReg$"],"sources":["C:/Users/hp/Desktop/Automata APP/frontend/src/components/AutomatonVisualizer.js"],"sourcesContent":["// AutomatonVisualizer.js\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Stage, Layer, Circle, Arrow, Text } from 'react-konva';\r\n\r\nconst AutomatonVisualizer = ({ automaton }) => {\r\n  const [statePositions, setStatePositions] = useState({});\r\n  \r\n  useEffect(() => {\r\n    // Auto-position states in a circular layout\r\n    const radius = 200;\r\n    const centerX = window.innerWidth / 2;\r\n    const centerY = window.innerHeight / 2;\r\n    const angleStep = (2 * Math.PI) / automaton.states.length;\r\n    const positions = {};\r\n\r\n    automaton.states.forEach((state, index) => {\r\n      positions[state] = {\r\n        x: centerX + radius * Math.cos(index * angleStep),\r\n        y: centerY + radius * Math.sin(index * angleStep),\r\n      };\r\n    });\r\n\r\n    setStatePositions(positions);\r\n  }, [automaton.states]);\r\n\r\n  return (\r\n    <Stage width={window.innerWidth} height={window.innerHeight}>\r\n      <Layer>\r\n        {/* Render each state as a circle */}\r\n        {automaton.states.map((state) => {\r\n          const { x, y } = statePositions[state] || {};\r\n          const isAcceptState = automaton.acceptStates.includes(state);\r\n          \r\n          return (\r\n            <React.Fragment key={state}>\r\n              {/* Circle for each state */}\r\n              <Circle\r\n                x={x}\r\n                y={y}\r\n                radius={20}\r\n                fill=\"blue\"\r\n                stroke={isAcceptState ? 'green' : 'black'}\r\n                strokeWidth={isAcceptState ? 4 : 2}\r\n              />\r\n              <Text x={x - 10} y={y - 5} text={state} fill=\"white\" />\r\n              {/* Start state arrow */}\r\n              {state === automaton.startState && (\r\n                <Arrow\r\n                  points={[x - 50, y, x - 20, y]}\r\n                  fill=\"red\"\r\n                  stroke=\"red\"\r\n                  pointerLength={10}\r\n                  pointerWidth={10}\r\n                />\r\n              )}\r\n            </React.Fragment>\r\n          );\r\n        })}\r\n\r\n        {/* Render transitions as arrows */}\r\n        {automaton.transitions.map((transition, index) => {\r\n          const { from, to, input } = transition;\r\n          const fromPos = statePositions[from];\r\n          const toPos = statePositions[to];\r\n          \r\n          if (!fromPos || !toPos) return null;\r\n\r\n          // For self-loop transitions\r\n          const isSelfLoop = from === to;\r\n          const loopOffset = 30;\r\n\r\n          return (\r\n            <React.Fragment key={index}>\r\n              {/* Draw self-loop */}\r\n              {isSelfLoop ? (\r\n                <Arrow\r\n                  points={[\r\n                    fromPos.x + loopOffset,\r\n                    fromPos.y - loopOffset,\r\n                    fromPos.x + loopOffset * 2,\r\n                    fromPos.y - loopOffset * 2,\r\n                    fromPos.x,\r\n                    fromPos.y - loopOffset * 2,\r\n                    fromPos.x,\r\n                    fromPos.y - loopOffset,\r\n                  ]}\r\n                  stroke=\"black\"\r\n                  fill=\"black\"\r\n                  pointerLength={6}\r\n                  pointerWidth={6}\r\n                />\r\n              ) : (\r\n                // Draw transition arrow between different states\r\n                <Arrow\r\n                  points={[fromPos.x, fromPos.y, toPos.x, toPos.y]}\r\n                  stroke=\"black\"\r\n                  fill=\"black\"\r\n                  pointerLength={10}\r\n                  pointerWidth={10}\r\n                />\r\n              )}\r\n              {/* Display transition label */}\r\n              <Text\r\n                x={isSelfLoop ? fromPos.x + loopOffset : (fromPos.x + toPos.x) / 2}\r\n                y={isSelfLoop ? fromPos.y - loopOffset * 2 : (fromPos.y + toPos.y) / 2}\r\n                text={input}\r\n                fontSize={14}\r\n                fill=\"black\"\r\n              />\r\n            </React.Fragment>\r\n          );\r\n        })}\r\n      </Layer>\r\n    </Stage>\r\n  );\r\n};\r\n\r\nexport default AutomatonVisualizer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}