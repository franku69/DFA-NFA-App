{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\Automata APP\\\\frontend\\\\src\\\\components\\\\AutomatonVisualizer.js\",\n  _s = $RefreshSig$();\n// AutomatonVisualizer.js\nimport React, { useEffect, useState } from 'react';\nimport { Stage, Layer, Circle, Arrow, Text } from 'react-konva';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AutomatonVisualizer = ({\n  automaton\n}) => {\n  _s();\n  const [statePositions, setStatePositions] = useState({});\n  useEffect(() => {\n    const positions = {};\n    if (automaton.states.length <= 3) {\n      // Arrange states horizontally if 3 or fewer\n      const startX = 100; // starting x position for the first state\n      const centerY = window.innerHeight / 2; // fixed y position for all states\n      const spacing = 150; // horizontal distance between states\n\n      automaton.states.forEach((state, index) => {\n        positions[state] = {\n          x: startX + index * spacing,\n          y: centerY\n        };\n      });\n    } else {\n      // Arrange states in a circular layout if more than 3\n      const radius = 200;\n      const centerX = window.innerWidth / 2;\n      const centerY = window.innerHeight / 2;\n      const angleStep = 2 * Math.PI / automaton.states.length;\n      automaton.states.forEach((state, index) => {\n        positions[state] = {\n          x: centerX + radius * Math.cos(index * angleStep),\n          y: centerY + radius * Math.sin(index * angleStep)\n        };\n      });\n    }\n    setStatePositions(positions);\n  }, [automaton.states]);\n  return /*#__PURE__*/_jsxDEV(Stage, {\n    width: window.innerWidth,\n    height: window.innerHeight,\n    children: /*#__PURE__*/_jsxDEV(Layer, {\n      children: [automaton.states.map(state => {\n        const {\n          x,\n          y\n        } = statePositions[state] || {};\n        const isAcceptState = automaton.acceptStates.includes(state);\n        return /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Circle, {\n            x: x,\n            y: y,\n            radius: 20,\n            fill: \"blue\",\n            stroke: isAcceptState ? 'green' : 'black',\n            strokeWidth: isAcceptState ? 4 : 2\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            x: x - 10,\n            y: y - 5,\n            text: state,\n            fill: \"white\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 15\n          }, this), state === automaton.startState && /*#__PURE__*/_jsxDEV(Arrow, {\n            points: [x - 50, y, x - 20, y],\n            fill: \"red\",\n            stroke: \"red\",\n            pointerLength: 10,\n            pointerWidth: 10\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 17\n          }, this)]\n        }, state, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }, this);\n      }), automaton.transitions.map((transition, index) => {\n        const {\n          from,\n          to,\n          input\n        } = transition;\n        const fromPos = statePositions[from];\n        const toPos = statePositions[to];\n        if (!fromPos || !toPos) return null;\n\n        // For self-loop transitions\n        const isSelfLoop = from === to;\n        const loopOffset = 30;\n        return /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: [isSelfLoop ? /*#__PURE__*/_jsxDEV(Arrow, {\n            points: [fromPos.x + loopOffset, fromPos.y - loopOffset, fromPos.x + loopOffset * 2, fromPos.y - loopOffset * 2, fromPos.x, fromPos.y - loopOffset * 2, fromPos.x, fromPos.y - loopOffset],\n            stroke: \"black\",\n            fill: \"black\",\n            pointerLength: 6,\n            pointerWidth: 6\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 17\n          }, this) :\n          /*#__PURE__*/\n          // Draw transition arrow between different states\n          _jsxDEV(Arrow, {\n            points: [fromPos.x, fromPos.y, toPos.x, toPos.y],\n            stroke: \"black\",\n            fill: \"black\",\n            pointerLength: 10,\n            pointerWidth: 10\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            x: isSelfLoop ? fromPos.x + loopOffset : (fromPos.x + toPos.x) / 2,\n            y: isSelfLoop ? fromPos.y - loopOffset * 2 : (fromPos.y + toPos.y) / 2,\n            text: input,\n            fontSize: 14,\n            fill: \"black\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s(AutomatonVisualizer, \"LrAznVwXtPCQOoFFfKMLuQSOdww=\");\n_c = AutomatonVisualizer;\nexport default AutomatonVisualizer;\nvar _c;\n$RefreshReg$(_c, \"AutomatonVisualizer\");","map":{"version":3,"names":["React","useEffect","useState","Stage","Layer","Circle","Arrow","Text","jsxDEV","_jsxDEV","AutomatonVisualizer","automaton","_s","statePositions","setStatePositions","positions","states","length","startX","centerY","window","innerHeight","spacing","forEach","state","index","x","y","radius","centerX","innerWidth","angleStep","Math","PI","cos","sin","width","height","children","map","isAcceptState","acceptStates","includes","Fragment","fill","stroke","strokeWidth","fileName","_jsxFileName","lineNumber","columnNumber","text","startState","points","pointerLength","pointerWidth","transitions","transition","from","to","input","fromPos","toPos","isSelfLoop","loopOffset","fontSize","_c","$RefreshReg$"],"sources":["C:/Users/hp/Desktop/Automata APP/frontend/src/components/AutomatonVisualizer.js"],"sourcesContent":["// AutomatonVisualizer.js\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Stage, Layer, Circle, Arrow, Text } from 'react-konva';\r\n\r\nconst AutomatonVisualizer = ({ automaton }) => {\r\n  const [statePositions, setStatePositions] = useState({});\r\n  \r\n  useEffect(() => {\r\n    const positions = {};\r\n\r\n    if (automaton.states.length <= 3) {\r\n      // Arrange states horizontally if 3 or fewer\r\n      const startX = 100; // starting x position for the first state\r\n      const centerY = window.innerHeight / 2; // fixed y position for all states\r\n      const spacing = 150; // horizontal distance between states\r\n\r\n      automaton.states.forEach((state, index) => {\r\n        positions[state] = {\r\n          x: startX + index * spacing,\r\n          y: centerY,\r\n        };\r\n      });\r\n    } else {\r\n      // Arrange states in a circular layout if more than 3\r\n      const radius = 200;\r\n      const centerX = window.innerWidth / 2;\r\n      const centerY = window.innerHeight / 2;\r\n      const angleStep = (2 * Math.PI) / automaton.states.length;\r\n\r\n      automaton.states.forEach((state, index) => {\r\n        positions[state] = {\r\n          x: centerX + radius * Math.cos(index * angleStep),\r\n          y: centerY + radius * Math.sin(index * angleStep),\r\n        };\r\n      });\r\n    }\r\n\r\n    setStatePositions(positions);\r\n  }, [automaton.states]);\r\n\r\n  return (\r\n    <Stage width={window.innerWidth} height={window.innerHeight}>\r\n      <Layer>\r\n        {/* Render each state as a circle */}\r\n        {automaton.states.map((state) => {\r\n          const { x, y } = statePositions[state] || {};\r\n          const isAcceptState = automaton.acceptStates.includes(state);\r\n          \r\n          return (\r\n            <React.Fragment key={state}>\r\n              {/* Circle for each state */}\r\n              <Circle\r\n                x={x}\r\n                y={y}\r\n                radius={20}\r\n                fill=\"blue\"\r\n                stroke={isAcceptState ? 'green' : 'black'}\r\n                strokeWidth={isAcceptState ? 4 : 2}\r\n              />\r\n              <Text x={x - 10} y={y - 5} text={state} fill=\"white\" />\r\n              {/* Start state arrow */}\r\n              {state === automaton.startState && (\r\n                <Arrow\r\n                  points={[x - 50, y, x - 20, y]}\r\n                  fill=\"red\"\r\n                  stroke=\"red\"\r\n                  pointerLength={10}\r\n                  pointerWidth={10}\r\n                />\r\n              )}\r\n            </React.Fragment>\r\n          );\r\n        })}\r\n\r\n        {/* Render transitions as arrows */}\r\n        {automaton.transitions.map((transition, index) => {\r\n          const { from, to, input } = transition;\r\n          const fromPos = statePositions[from];\r\n          const toPos = statePositions[to];\r\n          \r\n          if (!fromPos || !toPos) return null;\r\n\r\n          // For self-loop transitions\r\n          const isSelfLoop = from === to;\r\n          const loopOffset = 30;\r\n\r\n          return (\r\n            <React.Fragment key={index}>\r\n              {/* Draw self-loop */}\r\n              {isSelfLoop ? (\r\n                <Arrow\r\n                  points={[\r\n                    fromPos.x + loopOffset,\r\n                    fromPos.y - loopOffset,\r\n                    fromPos.x + loopOffset * 2,\r\n                    fromPos.y - loopOffset * 2,\r\n                    fromPos.x,\r\n                    fromPos.y - loopOffset * 2,\r\n                    fromPos.x,\r\n                    fromPos.y - loopOffset,\r\n                  ]}\r\n                  stroke=\"black\"\r\n                  fill=\"black\"\r\n                  pointerLength={6}\r\n                  pointerWidth={6}\r\n                />\r\n              ) : (\r\n                // Draw transition arrow between different states\r\n                <Arrow\r\n                  points={[fromPos.x, fromPos.y, toPos.x, toPos.y]}\r\n                  stroke=\"black\"\r\n                  fill=\"black\"\r\n                  pointerLength={10}\r\n                  pointerWidth={10}\r\n                />\r\n              )}\r\n              {/* Display transition label */}\r\n              <Text\r\n                x={isSelfLoop ? fromPos.x + loopOffset : (fromPos.x + toPos.x) / 2}\r\n                y={isSelfLoop ? fromPos.y - loopOffset * 2 : (fromPos.y + toPos.y) / 2}\r\n                text={input}\r\n                fontSize={14}\r\n                fill=\"black\"\r\n              />\r\n            </React.Fragment>\r\n          );\r\n        })}\r\n      </Layer>\r\n    </Stage>\r\n  );\r\n};\r\n\r\nexport default AutomatonVisualizer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}