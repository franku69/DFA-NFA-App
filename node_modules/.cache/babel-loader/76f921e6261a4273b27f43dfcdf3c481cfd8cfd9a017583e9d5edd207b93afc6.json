{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\Automata APP\\\\frontend\\\\src\\\\components\\\\AutomatonVisualizer.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Stage, Layer, Circle, Arrow, Text } from 'react-konva';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AutomatonVisualizer = ({\n  automaton\n}) => {\n  _s();\n  const [statePositions, setStatePositions] = useState({});\n  useEffect(() => {\n    const positions = {};\n    const centerX = window.innerWidth / 2;\n    const centerY = window.innerHeight / 2;\n    const startRadius = 150; // Base radius\n    const radiusIncrement = 40; // Increase in radius per additional state\n    const radius = startRadius + radiusIncrement * (automaton.states.length - 1); // Adjust radius dynamically\n    const angleStep = 2 * Math.PI / automaton.states.length; // Angle between states\n\n    automaton.states.forEach((state, index) => {\n      if (state === automaton.startState) {\n        // Position the starting state to the left\n        positions[state] = {\n          x: centerX - radius,\n          y: centerY\n        };\n      } else {\n        // Position other states around the center in a balanced circular layout\n        const angle = index * angleStep;\n        positions[state] = {\n          x: centerX + radius * Math.cos(angle),\n          y: centerY + radius * Math.sin(angle)\n        };\n      }\n    });\n    setStatePositions(positions);\n  }, [automaton.states, automaton.startState]);\n  const getSelfLoopTransitions = state => {\n    return automaton.transitions.filter(transition => transition.from === state && transition.to === state).map(transition => transition.input).sort();\n  };\n\n  // Offset function to prevent overlap between arrows and state circles\n  const offsetPoint = (from, to, distance) => {\n    const angle = Math.atan2(to.y - from.y, to.x - from.x);\n    return {\n      x: to.x - distance * Math.cos(angle),\n      y: to.y - distance * Math.sin(angle)\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(Stage, {\n    width: window.innerWidth,\n    height: window.innerHeight,\n    children: /*#__PURE__*/_jsxDEV(Layer, {\n      children: [automaton.states.map(state => {\n        const {\n          x,\n          y\n        } = statePositions[state] || {};\n        const isAcceptState = automaton.acceptStates.includes(state);\n        return /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Circle, {\n            x: x,\n            y: y,\n            radius: 20,\n            fill: \"blue\",\n            stroke: isAcceptState ? 'green' : 'black',\n            strokeWidth: isAcceptState ? 4 : 2\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            x: x - 10,\n            y: y - 5,\n            text: state,\n            fill: \"white\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 15\n          }, this), state === automaton.startState && /*#__PURE__*/_jsxDEV(Arrow, {\n            points: [x - 50, y, x - 20, y],\n            fill: \"red\",\n            stroke: \"red\",\n            pointerLength: 10,\n            pointerWidth: 10\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 17\n          }, this)]\n        }, state, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this);\n      }), automaton.transitions.map((transition, index) => {\n        const {\n          from,\n          to,\n          input\n        } = transition;\n        const fromPos = statePositions[from];\n        const toPos = statePositions[to];\n        const arrowOffset = 25;\n        const textOffset = 30; // Offset for transition labels\n\n        if (!fromPos || !toPos) return null;\n        const isSelfLoop = from === to;\n        if (isSelfLoop) {\n          // Dynamic loop radius and offset to avoid crowding\n          const loopRadius = 30;\n          const loopOffset = 20; // Increase loop offset for better spacing\n          const selfLoopInputs = getSelfLoopTransitions(from).join(\", \");\n          return /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Arrow, {\n              points: [fromPos.x + loopRadius, fromPos.y - loopRadius, fromPos.x + loopRadius * 2, fromPos.y - loopRadius * 1.5, fromPos.x + loopRadius, fromPos.y - loopRadius * 2, fromPos.x, fromPos.y - loopRadius],\n              tension: 0.5,\n              stroke: \"black\",\n              fill: \"black\",\n              pointerLength: 6,\n              pointerWidth: 6\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Text, {\n              x: fromPos.x + loopRadius * 1.8,\n              y: fromPos.y - loopRadius * 1.8 - loopOffset,\n              text: selfLoopInputs,\n              fontSize: 14,\n              fill: \"black\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 17\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 15\n          }, this);\n        } else {\n          // Curved arrows for transitions between different states\n          const adjustedToPos = offsetPoint(fromPos, toPos, arrowOffset);\n          const curveOffset = 50; // Controls the curve depth\n          const middlePoint = {\n            x: (fromPos.x + adjustedToPos.x) / 2 + curveOffset * Math.sign(fromPos.y - toPos.y),\n            y: (fromPos.y + adjustedToPos.y) / 2 + curveOffset * Math.sign(toPos.x - fromPos.x)\n          };\n          return /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Arrow, {\n              points: [fromPos.x, fromPos.y, middlePoint.x, middlePoint.y, adjustedToPos.x, adjustedToPos.y],\n              tension: 0.5 // Keep the curve consistent\n              ,\n              stroke: \"black\",\n              fill: \"black\",\n              pointerLength: 10,\n              pointerWidth: 10\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Text, {\n              x: middlePoint.x,\n              y: middlePoint.y - textOffset // Offset for label\n              ,\n              text: input,\n              fontSize: 14,\n              fill: \"black\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 17\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 15\n          }, this);\n        }\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n_s(AutomatonVisualizer, \"LrAznVwXtPCQOoFFfKMLuQSOdww=\");\n_c = AutomatonVisualizer;\nexport default AutomatonVisualizer;\nvar _c;\n$RefreshReg$(_c, \"AutomatonVisualizer\");","map":{"version":3,"names":["React","useEffect","useState","Stage","Layer","Circle","Arrow","Text","jsxDEV","_jsxDEV","AutomatonVisualizer","automaton","_s","statePositions","setStatePositions","positions","centerX","window","innerWidth","centerY","innerHeight","startRadius","radiusIncrement","radius","states","length","angleStep","Math","PI","forEach","state","index","startState","x","y","angle","cos","sin","getSelfLoopTransitions","transitions","filter","transition","from","to","map","input","sort","offsetPoint","distance","atan2","width","height","children","isAcceptState","acceptStates","includes","Fragment","fill","stroke","strokeWidth","fileName","_jsxFileName","lineNumber","columnNumber","text","points","pointerLength","pointerWidth","fromPos","toPos","arrowOffset","textOffset","isSelfLoop","loopRadius","loopOffset","selfLoopInputs","join","tension","fontSize","adjustedToPos","curveOffset","middlePoint","sign","_c","$RefreshReg$"],"sources":["C:/Users/hp/Desktop/Automata APP/frontend/src/components/AutomatonVisualizer.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Stage, Layer, Circle, Arrow, Text } from 'react-konva';\r\n\r\nconst AutomatonVisualizer = ({ automaton }) => {\r\n  const [statePositions, setStatePositions] = useState({});\r\n\r\n  useEffect(() => {\r\n    const positions = {};\r\n    const centerX = window.innerWidth / 2;\r\n    const centerY = window.innerHeight / 2;\r\n  \r\n    const startRadius = 150; // Base radius\r\n    const radiusIncrement = 40; // Increase in radius per additional state\r\n    const radius = startRadius + radiusIncrement * (automaton.states.length - 1); // Adjust radius dynamically\r\n    const angleStep = (2 * Math.PI) / automaton.states.length; // Angle between states\r\n  \r\n    automaton.states.forEach((state, index) => {\r\n      if (state === automaton.startState) {\r\n        // Position the starting state to the left\r\n        positions[state] = {\r\n          x: centerX - radius,\r\n          y: centerY,\r\n        };\r\n      } else {\r\n        // Position other states around the center in a balanced circular layout\r\n        const angle = index * angleStep;\r\n        positions[state] = {\r\n          x: centerX + radius * Math.cos(angle),\r\n          y: centerY + radius * Math.sin(angle),\r\n        };\r\n      }\r\n    });\r\n  \r\n    setStatePositions(positions);\r\n  }, [automaton.states, automaton.startState]);\r\n  \r\n\r\n  const getSelfLoopTransitions = (state) => {\r\n    return automaton.transitions\r\n      .filter((transition) => transition.from === state && transition.to === state)\r\n      .map((transition) => transition.input)\r\n      .sort();\r\n  };\r\n\r\n  // Offset function to prevent overlap between arrows and state circles\r\n  const offsetPoint = (from, to, distance) => {\r\n    const angle = Math.atan2(to.y - from.y, to.x - from.x);\r\n    return {\r\n      x: to.x - distance * Math.cos(angle),\r\n      y: to.y - distance * Math.sin(angle),\r\n    };\r\n  };\r\n\r\n  return (\r\n    <Stage width={window.innerWidth} height={window.innerHeight}>\r\n      <Layer>\r\n        {/* Render states */}\r\n        {automaton.states.map((state) => {\r\n          const { x, y } = statePositions[state] || {};\r\n          const isAcceptState = automaton.acceptStates.includes(state);\r\n\r\n          return (\r\n            <React.Fragment key={state}>\r\n              <Circle\r\n                x={x}\r\n                y={y}\r\n                radius={20}\r\n                fill=\"blue\"\r\n                stroke={isAcceptState ? 'green' : 'black'}\r\n                strokeWidth={isAcceptState ? 4 : 2}\r\n              />\r\n              <Text x={x - 10} y={y - 5} text={state} fill=\"white\" />\r\n              {state === automaton.startState && (\r\n                <Arrow\r\n                  points={[x - 50, y, x - 20, y]}\r\n                  fill=\"red\"\r\n                  stroke=\"red\"\r\n                  pointerLength={10}\r\n                  pointerWidth={10}\r\n                />\r\n              )}\r\n            </React.Fragment>\r\n          );\r\n        })}\r\n\r\n        {/* Render transitions */}\r\n        {automaton.transitions.map((transition, index) => {\r\n          const { from, to, input } = transition;\r\n          const fromPos = statePositions[from];\r\n          const toPos = statePositions[to];\r\n          const arrowOffset = 25;\r\n          const textOffset = 30; // Offset for transition labels\r\n\r\n          if (!fromPos || !toPos) return null;\r\n\r\n          const isSelfLoop = from === to;\r\n\r\n          if (isSelfLoop) {\r\n            // Dynamic loop radius and offset to avoid crowding\r\n            const loopRadius = 30;\r\n            const loopOffset = 20; // Increase loop offset for better spacing\r\n            const selfLoopInputs = getSelfLoopTransitions(from).join(\", \");\r\n\r\n            return (\r\n              <React.Fragment key={index}>\r\n                <Arrow\r\n                  points={[\r\n                    fromPos.x + loopRadius, fromPos.y - loopRadius,\r\n                    fromPos.x + loopRadius * 2, fromPos.y - loopRadius * 1.5,\r\n                    fromPos.x + loopRadius, fromPos.y - loopRadius * 2,\r\n                    fromPos.x, fromPos.y - loopRadius\r\n                  ]}\r\n                  tension={0.5}\r\n                  stroke=\"black\"\r\n                  fill=\"black\"\r\n                  pointerLength={6}\r\n                  pointerWidth={6}\r\n                />\r\n                <Text\r\n                  x={fromPos.x + loopRadius * 1.8}\r\n                  y={fromPos.y - loopRadius * 1.8 - loopOffset}\r\n                  text={selfLoopInputs}\r\n                  fontSize={14}\r\n                  fill=\"black\"\r\n                />\r\n              </React.Fragment>\r\n            );\r\n          } \r\n          else {\r\n            // Curved arrows for transitions between different states\r\n            const adjustedToPos = offsetPoint(fromPos, toPos, arrowOffset);\r\n            const curveOffset = 50; // Controls the curve depth\r\n            const middlePoint = {\r\n              x: (fromPos.x + adjustedToPos.x) / 2 + curveOffset * Math.sign(fromPos.y - toPos.y),\r\n              y: (fromPos.y + adjustedToPos.y) / 2 + curveOffset * Math.sign(toPos.x - fromPos.x)\r\n            };\r\n          \r\n            return (\r\n              <React.Fragment key={index}>\r\n                <Arrow\r\n                  points={[\r\n                    fromPos.x, fromPos.y,\r\n                    middlePoint.x, middlePoint.y,\r\n                    adjustedToPos.x, adjustedToPos.y\r\n                  ]}\r\n                  tension={0.5} // Keep the curve consistent\r\n                  stroke=\"black\"\r\n                  fill=\"black\"\r\n                  pointerLength={10}\r\n                  pointerWidth={10}\r\n                />\r\n                <Text\r\n                  x={middlePoint.x}\r\n                  y={middlePoint.y - textOffset} // Offset for label\r\n                  text={input}\r\n                  fontSize={14}\r\n                  fill=\"black\"\r\n                />\r\n              </React.Fragment>\r\n            );\r\n          }\r\n        })}\r\n      </Layer>\r\n    </Stage>\r\n  );\r\n};\r\n\r\nexport default AutomatonVisualizer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}