{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\Automata APP\\\\frontend\\\\src\\\\components\\\\AutomatonVisualizer.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Stage, Layer, Circle, Arrow, Text } from 'react-konva';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AutomatonVisualizer = ({\n  automaton\n}) => {\n  _s();\n  const [statePositions, setStatePositions] = useState({});\n  useEffect(() => {\n    const positions = {};\n    const radius = 200; // Set the radius of the circular layout\n    const centerX = window.innerWidth / 2;\n    const centerY = window.innerHeight / 2;\n    const angleStep = 2 * Math.PI / automaton.states.length; // Angle between each state\n\n    automaton.states.forEach((state, index) => {\n      // Position each state in a circular layout\n      const angle = index * angleStep;\n      positions[state] = {\n        x: centerX + radius * Math.cos(angle),\n        y: centerY + radius * Math.sin(angle)\n      };\n    });\n    setStatePositions(positions);\n  }, [automaton.states]);\n  const getSelfLoopTransitions = state => {\n    return automaton.transitions.filter(transition => transition.from === state && transition.to === state).map(transition => transition.input).sort();\n  };\n  const offsetPoint = (from, to, distance) => {\n    const angle = Math.atan2(to.y - from.y, to.x - from.x);\n    return {\n      x: from.x + distance * Math.cos(angle),\n      y: from.y + distance * Math.sin(angle)\n    };\n  };\n  const adjustedOffsetPoint = (from, to, distance) => {\n    const angle = Math.atan2(to.y - from.y, to.x - from.x);\n    return {\n      x: to.x - distance * Math.cos(angle),\n      y: to.y - distance * Math.sin(angle)\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(Stage, {\n    width: window.innerWidth,\n    height: window.innerHeight,\n    children: /*#__PURE__*/_jsxDEV(Layer, {\n      children: [automaton.states.map(state => {\n        const {\n          x,\n          y\n        } = statePositions[state] || {};\n        const isAcceptState = automaton.acceptStates.includes(state);\n        return /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Circle, {\n            x: x,\n            y: y,\n            radius: 20,\n            fill: \"blue\",\n            stroke: isAcceptState ? 'green' : 'black',\n            strokeWidth: isAcceptState ? 4 : 2\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            x: x - 10,\n            y: y - 5,\n            text: state,\n            fill: \"white\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 15\n          }, this), state === automaton.startState && /*#__PURE__*/_jsxDEV(Arrow, {\n            points: [x - 50, y, x - 30, y],\n            fill: \"red\",\n            stroke: \"red\",\n            pointerLength: 10,\n            pointerWidth: 10\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 17\n          }, this)]\n        }, state, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this);\n      }), automaton.transitions.map((transition, index) => {\n        const {\n          from,\n          to,\n          input\n        } = transition;\n        const fromPos = statePositions[from];\n        const toPos = statePositions[to];\n        const arrowOffset = 25;\n        const textOffset = 30;\n        if (!fromPos || !toPos) return null;\n        const isSelfLoop = from === to;\n        if (isSelfLoop) {\n          const loopRadius = 30;\n          const loopOffset = 20;\n          const selfLoopInputs = getSelfLoopTransitions(from).join(\", \");\n          return /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Arrow, {\n              points: [fromPos.x + loopRadius, fromPos.y - loopRadius, fromPos.x + loopRadius * 2, fromPos.y - loopRadius * 1.5, fromPos.x + loopRadius, fromPos.y - loopRadius * 2, fromPos.x, fromPos.y - loopRadius],\n              tension: 0.5,\n              stroke: \"black\",\n              fill: \"black\",\n              pointerLength: 6,\n              pointerWidth: 6\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Text, {\n              x: fromPos.x + loopRadius * 1.8,\n              y: fromPos.y - loopRadius * 1.8 - loopOffset,\n              text: selfLoopInputs,\n              fontSize: 14,\n              fill: \"black\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 17\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 15\n          }, this);\n        } else {\n          const startOffsetPos = offsetPoint(fromPos, toPos, arrowOffset);\n          const adjustedToPos = adjustedOffsetPoint(fromPos, toPos, arrowOffset);\n          const curveOffset = 35;\n          const middlePoint = {\n            x: (startOffsetPos.x + adjustedToPos.x) / 2 - curveOffset * Math.sign(fromPos.y - toPos.y),\n            y: (startOffsetPos.y + adjustedToPos.y) / 2 - curveOffset * Math.sign(toPos.x - fromPos.x)\n          };\n          return /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Arrow, {\n              points: [startOffsetPos.x, startOffsetPos.y, middlePoint.x, middlePoint.y, adjustedToPos.x, adjustedToPos.y],\n              tension: 0.5,\n              stroke: \"black\",\n              fill: \"black\",\n              pointerLength: 10,\n              pointerWidth: 10\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Text, {\n              x: middlePoint.x,\n              y: middlePoint.y - textOffset,\n              text: input,\n              fontSize: 14,\n              fill: \"black\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 17\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 15\n          }, this);\n        }\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s(AutomatonVisualizer, \"LrAznVwXtPCQOoFFfKMLuQSOdww=\");\n_c = AutomatonVisualizer;\nexport default AutomatonVisualizer;\nvar _c;\n$RefreshReg$(_c, \"AutomatonVisualizer\");","map":{"version":3,"names":["React","useEffect","useState","Stage","Layer","Circle","Arrow","Text","jsxDEV","_jsxDEV","AutomatonVisualizer","automaton","_s","statePositions","setStatePositions","positions","radius","centerX","window","innerWidth","centerY","innerHeight","angleStep","Math","PI","states","length","forEach","state","index","angle","x","cos","y","sin","getSelfLoopTransitions","transitions","filter","transition","from","to","map","input","sort","offsetPoint","distance","atan2","adjustedOffsetPoint","width","height","children","isAcceptState","acceptStates","includes","Fragment","fill","stroke","strokeWidth","fileName","_jsxFileName","lineNumber","columnNumber","text","startState","points","pointerLength","pointerWidth","fromPos","toPos","arrowOffset","textOffset","isSelfLoop","loopRadius","loopOffset","selfLoopInputs","join","tension","fontSize","startOffsetPos","adjustedToPos","curveOffset","middlePoint","sign","_c","$RefreshReg$"],"sources":["C:/Users/hp/Desktop/Automata APP/frontend/src/components/AutomatonVisualizer.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Stage, Layer, Circle, Arrow, Text } from 'react-konva';\r\n\r\nconst AutomatonVisualizer = ({ automaton }) => {\r\n  const [statePositions, setStatePositions] = useState({});\r\n\r\n  useEffect(() => {\r\n    const positions = {};\r\n    const radius = 200; // Set the radius of the circular layout\r\n    const centerX = window.innerWidth / 2;\r\n    const centerY = window.innerHeight / 2;\r\n    const angleStep = (2 * Math.PI) / automaton.states.length; // Angle between each state\r\n\r\n    automaton.states.forEach((state, index) => {\r\n      // Position each state in a circular layout\r\n      const angle = index * angleStep;\r\n      positions[state] = {\r\n        x: centerX + radius * Math.cos(angle),\r\n        y: centerY + radius * Math.sin(angle),\r\n      };\r\n    });\r\n\r\n    setStatePositions(positions);\r\n  }, [automaton.states]);\r\n\r\n  const getSelfLoopTransitions = (state) => {\r\n    return automaton.transitions\r\n      .filter((transition) => transition.from === state && transition.to === state)\r\n      .map((transition) => transition.input)\r\n      .sort();\r\n  };\r\n\r\n  const offsetPoint = (from, to, distance) => {\r\n    const angle = Math.atan2(to.y - from.y, to.x - from.x);\r\n    return {\r\n      x: from.x + distance * Math.cos(angle),\r\n      y: from.y + distance * Math.sin(angle),\r\n    };\r\n  };\r\n\r\n  const adjustedOffsetPoint = (from, to, distance) => {\r\n    const angle = Math.atan2(to.y - from.y, to.x - from.x);\r\n    return {\r\n      x: to.x - distance * Math.cos(angle),\r\n      y: to.y - distance * Math.sin(angle),\r\n    };\r\n  };\r\n\r\n  return (\r\n    <Stage width={window.innerWidth} height={window.innerHeight}>\r\n      <Layer>\r\n        {automaton.states.map((state) => {\r\n          const { x, y } = statePositions[state] || {};\r\n          const isAcceptState = automaton.acceptStates.includes(state);\r\n\r\n          return (\r\n            <React.Fragment key={state}>\r\n              <Circle\r\n                x={x}\r\n                y={y}\r\n                radius={20}\r\n                fill=\"blue\"\r\n                stroke={isAcceptState ? 'green' : 'black'}\r\n                strokeWidth={isAcceptState ? 4 : 2}\r\n              />\r\n              <Text x={x - 10} y={y - 5} text={state} fill=\"white\" />\r\n              {state === automaton.startState && (\r\n                <Arrow\r\n                  points={[x - 50, y, x - 30, y]}\r\n                  fill=\"red\"\r\n                  stroke=\"red\"\r\n                  pointerLength={10}\r\n                  pointerWidth={10}\r\n                />\r\n              )}\r\n            </React.Fragment>\r\n          );\r\n        })}\r\n\r\n        {automaton.transitions.map((transition, index) => {\r\n          const { from, to, input } = transition;\r\n          const fromPos = statePositions[from];\r\n          const toPos = statePositions[to];\r\n          const arrowOffset = 25;\r\n          const textOffset = 30;\r\n\r\n          if (!fromPos || !toPos) return null;\r\n\r\n          const isSelfLoop = from === to;\r\n\r\n          if (isSelfLoop) {\r\n            const loopRadius = 30;\r\n            const loopOffset = 20;\r\n            const selfLoopInputs = getSelfLoopTransitions(from).join(\", \");\r\n\r\n            return (\r\n              <React.Fragment key={index}>\r\n                <Arrow\r\n                  points={[\r\n                    fromPos.x + loopRadius, fromPos.y - loopRadius,\r\n                    fromPos.x + loopRadius * 2, fromPos.y - loopRadius * 1.5,\r\n                    fromPos.x + loopRadius, fromPos.y - loopRadius * 2,\r\n                    fromPos.x, fromPos.y - loopRadius\r\n                  ]}\r\n                  tension={0.5}\r\n                  stroke=\"black\"\r\n                  fill=\"black\"\r\n                  pointerLength={6}\r\n                  pointerWidth={6}\r\n                />\r\n                <Text\r\n                  x={fromPos.x + loopRadius * 1.8}\r\n                  y={fromPos.y - loopRadius * 1.8 - loopOffset}\r\n                  text={selfLoopInputs}\r\n                  fontSize={14}\r\n                  fill=\"black\"\r\n                />\r\n              </React.Fragment>\r\n            );\r\n          } else {\r\n            const startOffsetPos = offsetPoint(fromPos, toPos, arrowOffset);\r\n            const adjustedToPos = adjustedOffsetPoint(fromPos, toPos, arrowOffset);\r\n            const curveOffset = 35;\r\n            const middlePoint = {\r\n              x: (startOffsetPos.x + adjustedToPos.x) / 2 - curveOffset * Math.sign(fromPos.y - toPos.y),\r\n              y: (startOffsetPos.y + adjustedToPos.y) / 2 - curveOffset * Math.sign(toPos.x - fromPos.x),\r\n            };\r\n\r\n            return (\r\n              <React.Fragment key={index}>\r\n                <Arrow\r\n                  points={[\r\n                    startOffsetPos.x, startOffsetPos.y,\r\n                    middlePoint.x, middlePoint.y,\r\n                    adjustedToPos.x, adjustedToPos.y\r\n                  ]}\r\n                  tension={0.5}\r\n                  stroke=\"black\"\r\n                  fill=\"black\"\r\n                  pointerLength={10}\r\n                  pointerWidth={10}\r\n                />\r\n                <Text\r\n                  x={middlePoint.x}\r\n                  y={middlePoint.y - textOffset}\r\n                  text={input}\r\n                  fontSize={14}\r\n                  fill=\"black\"\r\n                />\r\n              </React.Fragment>\r\n            );\r\n          }\r\n        })}\r\n      </Layer>\r\n    </Stage>\r\n  );\r\n};\r\n\r\nexport default AutomatonVisualizer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}