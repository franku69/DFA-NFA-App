{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\Automata APP\\\\frontend\\\\src\\\\components\\\\AutomatonVisualizer.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Stage, Layer, Circle, Arrow, Text } from 'react-konva';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AutomatonVisualizer = ({\n  automaton\n}) => {\n  _s();\n  const [statePositions, setStatePositions] = useState({});\n  const [scale, setScale] = useState(1);\n  useEffect(() => {\n    // Adjust the scale based on the screen width to ensure it fits smaller screens\n    const screenWidth = window.innerWidth;\n    const screenHeight = window.innerHeight;\n    const isMobile = screenWidth < 600;\n    const scaleFactor = isMobile ? 0.5 : 1; // Scale down to 50% on mobile\n\n    setScale(scaleFactor);\n    const positions = {};\n    const baseRadius = 200 * scaleFactor;\n    const radius = baseRadius + automaton.states.length * 30 * scaleFactor; // Dynamic radius based on states\n    const centerX = screenWidth / 2;\n    const centerY = screenHeight / 2;\n    const angleStep = 2 * Math.PI / (automaton.states.length - 1); // Exclude starting state from circular layout\n    const verticalOffset = 100 * scaleFactor; // Adjust for vertical spacing on smaller screens\n\n    automaton.states.forEach((state, index) => {\n      if (state === automaton.startState) {\n        // Position the starting state on the left side\n        positions[state] = {\n          x: centerX - radius - 50 * scaleFactor,\n          // Offset left from the circle\n          y: centerY\n        };\n      } else {\n        // Position other states in a circular pattern with additional vertical offset\n        const angle = (index - 1) * angleStep; // Offset index for correct circular position\n        positions[state] = {\n          x: centerX + radius * Math.cos(angle),\n          y: centerY + radius * Math.sin(angle) + index * verticalOffset // Add vertical spacing\n        };\n      }\n    });\n    setStatePositions(positions);\n  }, [automaton.states, automaton.startState]);\n  const getSelfLoopTransitions = state => {\n    return automaton.transitions.filter(transition => transition.from === state && transition.to === state).map(transition => transition.input).sort();\n  };\n  const offsetPoint = (from, to, distance) => {\n    const angle = Math.atan2(to.y - from.y, to.x - from.x);\n    return {\n      x: from.x + distance * Math.cos(angle),\n      y: from.y + distance * Math.sin(angle)\n    };\n  };\n  const adjustedOffsetPoint = (from, to, distance) => {\n    const angle = Math.atan2(to.y - from.y, to.x - from.x);\n    return {\n      x: to.x - distance * Math.cos(angle),\n      y: to.y - distance * Math.sin(angle)\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(Stage, {\n    width: window.innerWidth,\n    height: window.innerHeight,\n    scaleX: scale,\n    scaleY: scale,\n    children: /*#__PURE__*/_jsxDEV(Layer, {\n      children: [automaton.states.map(state => {\n        const {\n          x,\n          y\n        } = statePositions[state] || {};\n        const isAcceptState = automaton.acceptStates.includes(state);\n        return /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Circle, {\n            x: x,\n            y: y,\n            radius: 20 * scale // Scale circle radius\n            ,\n            fill: \"blue\",\n            stroke: isAcceptState ? 'green' : 'black',\n            strokeWidth: isAcceptState ? 4 * scale : 2 * scale // Scale stroke width\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            x: x - 10 * scale,\n            y: y - 5 * scale,\n            text: state,\n            fill: \"white\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 15\n          }, this), state === automaton.startState && /*#__PURE__*/_jsxDEV(Arrow, {\n            points: [x - 70 * scale, y, x - 30 * scale, y],\n            fill: \"red\",\n            stroke: \"red\",\n            pointerLength: 10 * scale,\n            pointerWidth: 10 * scale\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 17\n          }, this)]\n        }, state, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this);\n      }), automaton.transitions.map((transition, index) => {\n        const {\n          from,\n          to,\n          input\n        } = transition;\n        const fromPos = statePositions[from];\n        const toPos = statePositions[to];\n        const arrowOffset = 25 * scale;\n        const textOffset = 30 * scale;\n        if (!fromPos || !toPos) return null;\n        const isSelfLoop = from === to;\n        if (isSelfLoop) {\n          const loopRadius = 30 * scale;\n          const loopOffset = 20 * scale;\n          const selfLoopInputs = getSelfLoopTransitions(from).join(\", \");\n          return /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Arrow, {\n              points: [fromPos.x + loopRadius, fromPos.y - loopRadius, fromPos.x + loopRadius * 2, fromPos.y - loopRadius * 1.5, fromPos.x + loopRadius, fromPos.y - loopRadius * 2, fromPos.x, fromPos.y - loopRadius],\n              tension: 0.5,\n              stroke: \"black\",\n              fill: \"black\",\n              pointerLength: 6 * scale,\n              pointerWidth: 6 * scale\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Text, {\n              x: fromPos.x + loopRadius * 1.8,\n              y: fromPos.y - loopRadius * 1.8 - loopOffset,\n              text: selfLoopInputs,\n              fontSize: 14 * scale,\n              fill: \"black\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 17\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 15\n          }, this);\n        } else {\n          const startOffsetPos = offsetPoint(fromPos, toPos, arrowOffset);\n          const adjustedToPos = adjustedOffsetPoint(fromPos, toPos, arrowOffset);\n          const curveOffset = 35 * scale;\n          const middlePoint = {\n            x: (startOffsetPos.x + adjustedToPos.x) / 2 - curveOffset * Math.sign(fromPos.y - toPos.y),\n            y: (startOffsetPos.y + adjustedToPos.y) / 2 - curveOffset * Math.sign(toPos.x - fromPos.x)\n          };\n          return /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Arrow, {\n              points: [startOffsetPos.x, startOffsetPos.y, middlePoint.x, middlePoint.y, adjustedToPos.x, adjustedToPos.y],\n              tension: 0.5,\n              stroke: \"black\",\n              fill: \"black\",\n              pointerLength: 10 * scale,\n              pointerWidth: 10 * scale\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Text, {\n              x: middlePoint.x,\n              y: middlePoint.y - textOffset,\n              text: input,\n              fontSize: 14 * scale,\n              fill: \"black\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 17\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 15\n          }, this);\n        }\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n_s(AutomatonVisualizer, \"+4FSU7G+kWbA2Ogk1+laMdbfh3U=\");\n_c = AutomatonVisualizer;\nexport default AutomatonVisualizer;\nvar _c;\n$RefreshReg$(_c, \"AutomatonVisualizer\");","map":{"version":3,"names":["React","useEffect","useState","Stage","Layer","Circle","Arrow","Text","jsxDEV","_jsxDEV","AutomatonVisualizer","automaton","_s","statePositions","setStatePositions","scale","setScale","screenWidth","window","innerWidth","screenHeight","innerHeight","isMobile","scaleFactor","positions","baseRadius","radius","states","length","centerX","centerY","angleStep","Math","PI","verticalOffset","forEach","state","index","startState","x","y","angle","cos","sin","getSelfLoopTransitions","transitions","filter","transition","from","to","map","input","sort","offsetPoint","distance","atan2","adjustedOffsetPoint","width","height","scaleX","scaleY","children","isAcceptState","acceptStates","includes","Fragment","fill","stroke","strokeWidth","fileName","_jsxFileName","lineNumber","columnNumber","text","points","pointerLength","pointerWidth","fromPos","toPos","arrowOffset","textOffset","isSelfLoop","loopRadius","loopOffset","selfLoopInputs","join","tension","fontSize","startOffsetPos","adjustedToPos","curveOffset","middlePoint","sign","_c","$RefreshReg$"],"sources":["C:/Users/hp/Desktop/Automata APP/frontend/src/components/AutomatonVisualizer.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Stage, Layer, Circle, Arrow, Text } from 'react-konva';\r\n\r\nconst AutomatonVisualizer = ({ automaton }) => {\r\n  const [statePositions, setStatePositions] = useState({});\r\n  const [scale, setScale] = useState(1);\r\n\r\n  useEffect(() => {\r\n    // Adjust the scale based on the screen width to ensure it fits smaller screens\r\n    const screenWidth = window.innerWidth;\r\n    const screenHeight = window.innerHeight;\r\n    const isMobile = screenWidth < 600;\r\n    const scaleFactor = isMobile ? 0.5 : 1; // Scale down to 50% on mobile\r\n\r\n    setScale(scaleFactor);\r\n\r\n    const positions = {};\r\n    const baseRadius = 200 * scaleFactor;\r\n    const radius = baseRadius + automaton.states.length * 30 * scaleFactor; // Dynamic radius based on states\r\n    const centerX = screenWidth / 2;\r\n    const centerY = screenHeight / 2;\r\n    const angleStep = (2 * Math.PI) / (automaton.states.length - 1); // Exclude starting state from circular layout\r\n    const verticalOffset = 100 * scaleFactor; // Adjust for vertical spacing on smaller screens\r\n\r\n    automaton.states.forEach((state, index) => {\r\n      if (state === automaton.startState) {\r\n        // Position the starting state on the left side\r\n        positions[state] = {\r\n          x: centerX - radius - 50 * scaleFactor, // Offset left from the circle\r\n          y: centerY,\r\n        };\r\n      } else {\r\n        // Position other states in a circular pattern with additional vertical offset\r\n        const angle = (index - 1) * angleStep; // Offset index for correct circular position\r\n        positions[state] = {\r\n          x: centerX + radius * Math.cos(angle),\r\n          y: centerY + radius * Math.sin(angle) + index * verticalOffset, // Add vertical spacing\r\n        };\r\n      }\r\n    });\r\n\r\n    setStatePositions(positions);\r\n  }, [automaton.states, automaton.startState]);\r\n\r\n  const getSelfLoopTransitions = (state) => {\r\n    return automaton.transitions\r\n      .filter((transition) => transition.from === state && transition.to === state)\r\n      .map((transition) => transition.input)\r\n      .sort();\r\n  };\r\n\r\n  const offsetPoint = (from, to, distance) => {\r\n    const angle = Math.atan2(to.y - from.y, to.x - from.x);\r\n    return {\r\n      x: from.x + distance * Math.cos(angle),\r\n      y: from.y + distance * Math.sin(angle),\r\n    };\r\n  };\r\n\r\n  const adjustedOffsetPoint = (from, to, distance) => {\r\n    const angle = Math.atan2(to.y - from.y, to.x - from.x);\r\n    return {\r\n      x: to.x - distance * Math.cos(angle),\r\n      y: to.y - distance * Math.sin(angle),\r\n    };\r\n  };\r\n\r\n  return (\r\n    <Stage width={window.innerWidth} height={window.innerHeight} scaleX={scale} scaleY={scale}>\r\n      <Layer>\r\n        {automaton.states.map((state) => {\r\n          const { x, y } = statePositions[state] || {};\r\n          const isAcceptState = automaton.acceptStates.includes(state);\r\n\r\n          return (\r\n            <React.Fragment key={state}>\r\n              <Circle\r\n                x={x}\r\n                y={y}\r\n                radius={20 * scale} // Scale circle radius\r\n                fill=\"blue\"\r\n                stroke={isAcceptState ? 'green' : 'black'}\r\n                strokeWidth={isAcceptState ? 4 * scale : 2 * scale} // Scale stroke width\r\n              />\r\n              <Text x={x - 10 * scale} y={y - 5 * scale} text={state} fill=\"white\" />\r\n              {state === automaton.startState && (\r\n                <Arrow\r\n                  points={[x - 70 * scale, y, x - 30 * scale, y]}\r\n                  fill=\"red\"\r\n                  stroke=\"red\"\r\n                  pointerLength={10 * scale}\r\n                  pointerWidth={10 * scale}\r\n                />\r\n              )}\r\n            </React.Fragment>\r\n          );\r\n        })}\r\n\r\n        {automaton.transitions.map((transition, index) => {\r\n          const { from, to, input } = transition;\r\n          const fromPos = statePositions[from];\r\n          const toPos = statePositions[to];\r\n          const arrowOffset = 25 * scale;\r\n          const textOffset = 30 * scale;\r\n\r\n          if (!fromPos || !toPos) return null;\r\n\r\n          const isSelfLoop = from === to;\r\n\r\n          if (isSelfLoop) {\r\n            const loopRadius = 30 * scale;\r\n            const loopOffset = 20 * scale;\r\n            const selfLoopInputs = getSelfLoopTransitions(from).join(\", \");\r\n\r\n            return (\r\n              <React.Fragment key={index}>\r\n                <Arrow\r\n                  points={[\r\n                    fromPos.x + loopRadius, fromPos.y - loopRadius,\r\n                    fromPos.x + loopRadius * 2, fromPos.y - loopRadius * 1.5,\r\n                    fromPos.x + loopRadius, fromPos.y - loopRadius * 2,\r\n                    fromPos.x, fromPos.y - loopRadius\r\n                  ]}\r\n                  tension={0.5}\r\n                  stroke=\"black\"\r\n                  fill=\"black\"\r\n                  pointerLength={6 * scale}\r\n                  pointerWidth={6 * scale}\r\n                />\r\n                <Text\r\n                  x={fromPos.x + loopRadius * 1.8}\r\n                  y={fromPos.y - loopRadius * 1.8 - loopOffset}\r\n                  text={selfLoopInputs}\r\n                  fontSize={14 * scale}\r\n                  fill=\"black\"\r\n                />\r\n              </React.Fragment>\r\n            );\r\n          } else {\r\n            const startOffsetPos = offsetPoint(fromPos, toPos, arrowOffset);\r\n            const adjustedToPos = adjustedOffsetPoint(fromPos, toPos, arrowOffset);\r\n            const curveOffset = 35 * scale;\r\n            const middlePoint = {\r\n              x: (startOffsetPos.x + adjustedToPos.x) / 2 - curveOffset * Math.sign(fromPos.y - toPos.y),\r\n              y: (startOffsetPos.y + adjustedToPos.y) / 2 - curveOffset * Math.sign(toPos.x - fromPos.x),\r\n            };\r\n\r\n            return (\r\n              <React.Fragment key={index}>\r\n                <Arrow\r\n                  points={[\r\n                    startOffsetPos.x, startOffsetPos.y,\r\n                    middlePoint.x, middlePoint.y,\r\n                    adjustedToPos.x, adjustedToPos.y\r\n                  ]}\r\n                  tension={0.5}\r\n                  stroke=\"black\"\r\n                  fill=\"black\"\r\n                  pointerLength={10 * scale}\r\n                  pointerWidth={10 * scale}\r\n                />\r\n                <Text\r\n                  x={middlePoint.x}\r\n                  y={middlePoint.y - textOffset}\r\n                  text={input}\r\n                  fontSize={14 * scale}\r\n                  fill=\"black\"\r\n                />\r\n              </React.Fragment>\r\n            );\r\n          }\r\n        })}\r\n      </Layer>\r\n    </Stage>\r\n  );\r\n};\r\n\r\nexport default AutomatonVisualizer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}