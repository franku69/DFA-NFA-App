{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\Automata APP\\\\frontend\\\\src\\\\components\\\\AutomatonVisualizer.js\";\nimport React from 'react';\nimport { Stage, Layer, Circle, Line, Text } from 'react-konva';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AutomatonVisualizer = ({\n  automaton,\n  currentState\n}) => {\n  const stateRadius = 30;\n  const stateDistance = 150;\n  const startX = window.innerWidth / 4;\n  const getStatePosition = index => {\n    return {\n      x: startX + index * stateDistance,\n      y: window.innerHeight / 2\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(Stage, {\n    width: window.innerWidth,\n    height: window.innerHeight,\n    children: /*#__PURE__*/_jsxDEV(Layer, {\n      children: [automaton.states.map((state, index) => {\n        const {\n          x,\n          y\n        } = getStatePosition(index);\n        return /*#__PURE__*/_jsxDEV(Circle, {\n          x: x,\n          y: y,\n          radius: stateRadius,\n          fill: state === currentState ? 'green' : 'blue'\n        }, state, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 13\n        }, this);\n      }), automaton.states.map((state, index) => {\n        const {\n          x,\n          y\n        } = getStatePosition(index);\n        return /*#__PURE__*/_jsxDEV(Text, {\n          x: x - stateRadius / 2,\n          y: y - stateRadius / 2,\n          text: state,\n          fill: \"white\"\n        }, `text-${state}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 13\n        }, this);\n      }), automaton.transitions.map((transition, index) => {\n        const fromIndex = automaton.states.indexOf(transition.from);\n        const toIndex = automaton.states.indexOf(transition.to);\n        const {\n          x: fromX,\n          y: fromY\n        } = getStatePosition(fromIndex);\n        const {\n          x: toX,\n          y: toY\n        } = getStatePosition(toIndex);\n        return /*#__PURE__*/_jsxDEV(Line, {\n          points: [fromX, fromY, toX, toY],\n          stroke: \"black\",\n          strokeWidth: 2,\n          lineCap: \"round\",\n          lineJoin: \"round\"\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this);\n      }), automaton.transitions.map((transition, index) => {\n        const fromIndex = automaton.states.indexOf(transition.from);\n        const toIndex = automaton.states.indexOf(transition.to);\n        const {\n          x: fromX,\n          y: fromY\n        } = getStatePosition(fromIndex);\n        const {\n          x: toX,\n          y: toY\n        } = getStatePosition(toIndex);\n        return /*#__PURE__*/_jsxDEV(Text, {\n          x: (fromX + toX) / 2,\n          y: (fromY + toY) / 2,\n          text: transition.input,\n          fill: \"black\"\n        }, `label-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n};\n_c = AutomatonVisualizer;\nexport default AutomatonVisualizer;\nvar _c;\n$RefreshReg$(_c, \"AutomatonVisualizer\");","map":{"version":3,"names":["React","Stage","Layer","Circle","Line","Text","jsxDEV","_jsxDEV","AutomatonVisualizer","automaton","currentState","stateRadius","stateDistance","startX","window","innerWidth","getStatePosition","index","x","y","innerHeight","width","height","children","states","map","state","radius","fill","fileName","_jsxFileName","lineNumber","columnNumber","text","transitions","transition","fromIndex","indexOf","from","toIndex","to","fromX","fromY","toX","toY","points","stroke","strokeWidth","lineCap","lineJoin","input","_c","$RefreshReg$"],"sources":["C:/Users/hp/Desktop/Automata APP/frontend/src/components/AutomatonVisualizer.js"],"sourcesContent":["import React from 'react';\r\nimport { Stage, Layer, Circle, Line, Text } from 'react-konva';\r\n\r\nconst AutomatonVisualizer = ({ automaton, currentState }) => {\r\n  const stateRadius = 30;\r\n  const stateDistance = 150;\r\n  const startX = window.innerWidth / 4;\r\n\r\n  const getStatePosition = (index) => {\r\n    return { x: startX + index * stateDistance, y: window.innerHeight / 2 };\r\n  };\r\n\r\n  return (\r\n    <Stage width={window.innerWidth} height={window.innerHeight}>\r\n      <Layer>\r\n        {/* Render states */}\r\n        {automaton.states.map((state, index) => {\r\n          const { x, y } = getStatePosition(index);\r\n          return (\r\n            <Circle\r\n              key={state}\r\n              x={x}\r\n              y={y}\r\n              radius={stateRadius}\r\n              fill={state === currentState ? 'green' : 'blue'}\r\n            />\r\n          );\r\n        })}\r\n\r\n        {/* Render state labels */}\r\n        {automaton.states.map((state, index) => {\r\n          const { x, y } = getStatePosition(index);\r\n          return (\r\n            <Text\r\n              key={`text-${state}`}\r\n              x={x - stateRadius / 2}\r\n              y={y - stateRadius / 2}\r\n              text={state}\r\n              fill=\"white\"\r\n            />\r\n          );\r\n        })}\r\n\r\n        {/* Render transitions */}\r\n        {automaton.transitions.map((transition, index) => {\r\n          const fromIndex = automaton.states.indexOf(transition.from);\r\n          const toIndex = automaton.states.indexOf(transition.to);\r\n          const { x: fromX, y: fromY } = getStatePosition(fromIndex);\r\n          const { x: toX, y: toY } = getStatePosition(toIndex);\r\n\r\n          return (\r\n            <Line\r\n              key={index}\r\n              points={[fromX, fromY, toX, toY]}\r\n              stroke=\"black\"\r\n              strokeWidth={2}\r\n              lineCap=\"round\"\r\n              lineJoin=\"round\"\r\n            />\r\n          );\r\n        })}\r\n\r\n        {/* Render transition labels */}\r\n        {automaton.transitions.map((transition, index) => {\r\n          const fromIndex = automaton.states.indexOf(transition.from);\r\n          const toIndex = automaton.states.indexOf(transition.to);\r\n          const { x: fromX, y: fromY } = getStatePosition(fromIndex);\r\n          const { x: toX, y: toY } = getStatePosition(toIndex);\r\n\r\n          return (\r\n            <Text\r\n              key={`label-${index}`}\r\n              x={(fromX + toX) / 2}\r\n              y={(fromY + toY) / 2}\r\n              text={transition.input}\r\n              fill=\"black\"\r\n            />\r\n          );\r\n        })}\r\n      </Layer>\r\n    </Stage>\r\n  );\r\n};\r\n\r\nexport default AutomatonVisualizer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}