{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\Automata APP\\\\frontend\\\\src\\\\components\\\\AutomatonVisualizer.js\",\n  _s = $RefreshSig$();\n// AutomatonVisualizer.js\nimport React, { useEffect, useState } from 'react';\nimport { Stage, Layer, Circle, Arrow, Text } from 'react-konva';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AutomatonVisualizer = ({\n  automaton\n}) => {\n  _s();\n  const [statePositions, setStatePositions] = useState({});\n  useEffect(() => {\n    const positions = {};\n    const radius = 200; // Radius of the circular layout\n    const centerX = window.innerWidth / 2;\n    const centerY = window.innerHeight / 2;\n    const angleStep = 2 * Math.PI / automaton.states.length;\n    automaton.states.forEach((state, index) => {\n      positions[state] = {\n        x: centerX + radius * Math.cos(index * angleStep),\n        y: centerY + radius * Math.sin(index * angleStep)\n      };\n    });\n    setStatePositions(positions);\n  }, [automaton.states]);\n\n  // Helper to group and order self-loop transitions by state\n  const getSelfLoopTransitions = state => {\n    return automaton.transitions.filter(transition => transition.from === state && transition.to === state).map(transition => transition.input).sort(); // Sort inputs alphabetically\n  };\n  return /*#__PURE__*/_jsxDEV(Stage, {\n    width: window.innerWidth,\n    height: window.innerHeight,\n    children: /*#__PURE__*/_jsxDEV(Layer, {\n      children: [automaton.states.map(state => {\n        const {\n          x,\n          y\n        } = statePositions[state] || {};\n        const isAcceptState = automaton.acceptStates.includes(state);\n        const isDeadState = !automaton.acceptStates.includes(state) && state !== automaton.startState;\n        return /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Circle, {\n            x: x,\n            y: y,\n            radius: 20,\n            fill: isDeadState ? 'gray' : 'blue',\n            stroke: isAcceptState ? 'green' : 'black',\n            strokeWidth: isAcceptState ? 4 : 2,\n            dash: isDeadState ? [4, 4] : []\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            x: x - 10,\n            y: y - 5,\n            text: state,\n            fill: \"white\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 15\n          }, this), state === automaton.startState && /*#__PURE__*/_jsxDEV(Arrow, {\n            points: [x - 50, y, x - 20, y],\n            fill: \"red\",\n            stroke: \"red\",\n            pointerLength: 10,\n            pointerWidth: 10\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 17\n          }, this)]\n        }, state, true, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 13\n        }, this);\n      }), automaton.transitions.map((transition, index) => {\n        const {\n          from,\n          to,\n          input\n        } = transition;\n        const fromPos = statePositions[from];\n        const toPos = statePositions[to];\n        if (!fromPos || !toPos) return null;\n        const isSelfLoop = from === to;\n        const loopOffset = 30;\n        const curveOffset = 50;\n\n        // Render self-loop with multiple labels for each input\n        if (isSelfLoop) {\n          const selfLoopInputs = getSelfLoopTransitions(from).join(\", \");\n          return /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Arrow, {\n              points: [fromPos.x + loopOffset, fromPos.y - loopOffset, fromPos.x + loopOffset * 1.5, fromPos.y - loopOffset * 2, fromPos.x, fromPos.y - loopOffset * 2, fromPos.x, fromPos.y - loopOffset],\n              stroke: \"black\",\n              fill: \"black\",\n              pointerLength: 6,\n              pointerWidth: 6\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Text, {\n              x: fromPos.x + loopOffset * 1.5,\n              y: fromPos.y - loopOffset * 1.5,\n              text: selfLoopInputs,\n              fontSize: 14,\n              fill: \"black\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 17\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 15\n          }, this);\n        }\n\n        // Render transition arrows between different states with curved paths\n        const labelOffset = 15; // Offset for label position to avoid overlap\n        return /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Arrow, {\n            points: [fromPos.x, fromPos.y, (fromPos.x + toPos.x) / 2 + (fromPos.y - toPos.y) / curveOffset, (fromPos.y + toPos.y) / 2 + (toPos.x - fromPos.x) / curveOffset, toPos.x, toPos.y],\n            stroke: \"black\",\n            fill: \"black\",\n            pointerLength: 10,\n            pointerWidth: 10\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            x: (fromPos.x + toPos.x) / 2 + (fromPos.y - toPos.y) / curveOffset + labelOffset,\n            y: (fromPos.y + toPos.y) / 2 + (toPos.x - fromPos.x) / curveOffset + labelOffset,\n            text: input,\n            fontSize: 14,\n            fill: \"black\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s(AutomatonVisualizer, \"LrAznVwXtPCQOoFFfKMLuQSOdww=\");\n_c = AutomatonVisualizer;\nexport default AutomatonVisualizer;\nvar _c;\n$RefreshReg$(_c, \"AutomatonVisualizer\");","map":{"version":3,"names":["React","useEffect","useState","Stage","Layer","Circle","Arrow","Text","jsxDEV","_jsxDEV","AutomatonVisualizer","automaton","_s","statePositions","setStatePositions","positions","radius","centerX","window","innerWidth","centerY","innerHeight","angleStep","Math","PI","states","length","forEach","state","index","x","cos","y","sin","getSelfLoopTransitions","transitions","filter","transition","from","to","map","input","sort","width","height","children","isAcceptState","acceptStates","includes","isDeadState","startState","Fragment","fill","stroke","strokeWidth","dash","fileName","_jsxFileName","lineNumber","columnNumber","text","points","pointerLength","pointerWidth","fromPos","toPos","isSelfLoop","loopOffset","curveOffset","selfLoopInputs","join","fontSize","labelOffset","_c","$RefreshReg$"],"sources":["C:/Users/hp/Desktop/Automata APP/frontend/src/components/AutomatonVisualizer.js"],"sourcesContent":["// AutomatonVisualizer.js\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Stage, Layer, Circle, Arrow, Text } from 'react-konva';\r\n\r\nconst AutomatonVisualizer = ({ automaton }) => {\r\n  const [statePositions, setStatePositions] = useState({});\r\n\r\n  useEffect(() => {\r\n    const positions = {};\r\n    const radius = 200; // Radius of the circular layout\r\n    const centerX = window.innerWidth / 2;\r\n    const centerY = window.innerHeight / 2;\r\n    const angleStep = (2 * Math.PI) / automaton.states.length;\r\n\r\n    automaton.states.forEach((state, index) => {\r\n      positions[state] = {\r\n        x: centerX + radius * Math.cos(index * angleStep),\r\n        y: centerY + radius * Math.sin(index * angleStep),\r\n      };\r\n    });\r\n\r\n    setStatePositions(positions);\r\n  }, [automaton.states]);\r\n\r\n  // Helper to group and order self-loop transitions by state\r\n  const getSelfLoopTransitions = (state) => {\r\n    return automaton.transitions\r\n      .filter((transition) => transition.from === state && transition.to === state)\r\n      .map((transition) => transition.input)\r\n      .sort(); // Sort inputs alphabetically\r\n  };\r\n\r\n  return (\r\n    <Stage width={window.innerWidth} height={window.innerHeight}>\r\n      <Layer>\r\n        {/* Render each state as a circle */}\r\n        {automaton.states.map((state) => {\r\n          const { x, y } = statePositions[state] || {};\r\n          const isAcceptState = automaton.acceptStates.includes(state);\r\n          const isDeadState = !automaton.acceptStates.includes(state) && state !== automaton.startState;\r\n\r\n          return (\r\n            <React.Fragment key={state}>\r\n              <Circle\r\n                x={x}\r\n                y={y}\r\n                radius={20}\r\n                fill={isDeadState ? 'gray' : 'blue'}\r\n                stroke={isAcceptState ? 'green' : 'black'}\r\n                strokeWidth={isAcceptState ? 4 : 2}\r\n                dash={isDeadState ? [4, 4] : []}\r\n              />\r\n              <Text x={x - 10} y={y - 5} text={state} fill=\"white\" />\r\n              {state === automaton.startState && (\r\n                <Arrow\r\n                  points={[x - 50, y, x - 20, y]}\r\n                  fill=\"red\"\r\n                  stroke=\"red\"\r\n                  pointerLength={10}\r\n                  pointerWidth={10}\r\n                />\r\n              )}\r\n            </React.Fragment>\r\n          );\r\n        })}\r\n\r\n        {/* Render transitions as arrows */}\r\n        {automaton.transitions.map((transition, index) => {\r\n          const { from, to, input } = transition;\r\n          const fromPos = statePositions[from];\r\n          const toPos = statePositions[to];\r\n\r\n          if (!fromPos || !toPos) return null;\r\n\r\n          const isSelfLoop = from === to;\r\n          const loopOffset = 30;\r\n          const curveOffset = 50;\r\n\r\n          // Render self-loop with multiple labels for each input\r\n          if (isSelfLoop) {\r\n            const selfLoopInputs = getSelfLoopTransitions(from).join(\", \");\r\n\r\n            return (\r\n              <React.Fragment key={index}>\r\n                <Arrow\r\n                  points={[\r\n                    fromPos.x + loopOffset,\r\n                    fromPos.y - loopOffset,\r\n                    fromPos.x + loopOffset * 1.5,\r\n                    fromPos.y - loopOffset * 2,\r\n                    fromPos.x,\r\n                    fromPos.y - loopOffset * 2,\r\n                    fromPos.x,\r\n                    fromPos.y - loopOffset,\r\n                  ]}\r\n                  stroke=\"black\"\r\n                  fill=\"black\"\r\n                  pointerLength={6}\r\n                  pointerWidth={6}\r\n                />\r\n                <Text\r\n                  x={fromPos.x + loopOffset * 1.5}\r\n                  y={fromPos.y - loopOffset * 1.5}\r\n                  text={selfLoopInputs}\r\n                  fontSize={14}\r\n                  fill=\"black\"\r\n                />\r\n              </React.Fragment>\r\n            );\r\n          }\r\n\r\n          // Render transition arrows between different states with curved paths\r\n          const labelOffset = 15; // Offset for label position to avoid overlap\r\n          return (\r\n            <React.Fragment key={index}>\r\n              <Arrow\r\n                points={[\r\n                  fromPos.x,\r\n                  fromPos.y,\r\n                  (fromPos.x + toPos.x) / 2 + (fromPos.y - toPos.y) / curveOffset,\r\n                  (fromPos.y + toPos.y) / 2 + (toPos.x - fromPos.x) / curveOffset,\r\n                  toPos.x,\r\n                  toPos.y,\r\n                ]}\r\n                stroke=\"black\"\r\n                fill=\"black\"\r\n                pointerLength={10}\r\n                pointerWidth={10}\r\n              />\r\n              <Text\r\n                x={(fromPos.x + toPos.x) / 2 + (fromPos.y - toPos.y) / curveOffset + labelOffset}\r\n                y={(fromPos.y + toPos.y) / 2 + (toPos.x - fromPos.x) / curveOffset + labelOffset}\r\n                text={input}\r\n                fontSize={14}\r\n                fill=\"black\"\r\n              />\r\n            </React.Fragment>\r\n          );\r\n        })}\r\n      </Layer>\r\n    </Stage>\r\n  );\r\n};\r\n\r\nexport default AutomatonVisualizer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}